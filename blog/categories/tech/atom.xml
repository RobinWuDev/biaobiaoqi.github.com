<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Biaobiaoqi的博客]]></title>
  <link href="http://biaobiaoqi.github.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://biaobiaoqi.github.com/"/>
  <updated>2013-09-08T16:26:44+08:00</updated>
  <id>http://biaobiaoqi.github.com/</id>
  <author>
    <name><![CDATA[Biaobiaoqi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[对Java字符串的探究]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/09/08/string-interning/"/>
    <updated>2013-09-08T13:01:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/09/08/string-interning</id>
    <content type="html"><![CDATA[<h2>问题的出发点</h2>

<p>在网上看到一道题：</p>

<p><code>java
String str = new String("abc");  
</code></p>

<p>以上代码执行过程中生成了多少个String对象？</p>

<p>答案写的是两个。"abc"本身是一个，而new又生成了一个。</p>

<h2>"abc"是什么</h2>

<p>查看这句程序的字节码，如下：
```
NEW String</p>

<pre><code>DUP  
LDC "abc"  
INVOKESPECIAL String.&lt;init&gt;(String) : void  
ASTORE 1   
</code></pre>

<p><code>``
指令</code>ldc indexbyte`的含义：将两字节的值从indexbyte索引的常量池中的项中推到方法栈上。</p>

<p>指令<code>LDC "abc"</code>说明了"abc"并不是直接以对象存在的，而是存在于常量池的索引中。String的构造函数调用命令实际使用的就是String类型作为参数，那么，栈上应该有一个String类型的索引。</p>

<p>由此我们得出，在字节码中，ldc命令在常量池中找到了能索引到“abc”那个String对象的索引值。</p>

<h2>常量池</h2>

<p>常量池是类文件（.class）文件中的一部分，记录了许多常量信息，索引的字符串信息。</p>

<p>由于Java是动态加载的，类文件并没有包含程序运行时的内存布局，方法调用等无法直接记录出方法的物理位置，常量池通过索引的方法解决了这个问题。</p>

<!--more-->


<p>常量池中存着许多表，其中Constant_Utf8_info表中，记录着会被初始化为String对象的字符串的字面值（iteral）。
而在String 的java doc中，有对String字面值的说明：</p>

<blockquote><p>All string literals in Java programs, such as "abc", are implemented as instances of this class.</p></blockquote>

<p>在Java编译的过程中，确定下来的String字面值都先被优化记录在常量池中（那些双引号字符串，都是以CONSTANT_utf8_info的形式存储在常量池中的）。也就是说，Java源代码文件中出现的那些诸如"abc"字符串，都已经被提前放在了常量池中。</p>

<p>可以使用如下代码验证这一点：</p>

<p>```java
public class Program<br/>
{</p>

<pre><code>public static void main(String[] args)  
{  
   String str1 = "Hello";    
   String str2 = "Hello";   
   System.out.print(str1 == str2);  
}  
</code></pre>

<p>}<br/>
```</p>

<p>输出结果是true.说明"Hello"作为对象是被程序从同一个内存空间读取出来的。</p>

<p>常量池是编译时产生的，存在于类文件中（*.class文件）。运行时，JVM中每个对象都拥有自己的运行时常量池（run time constant pool）。</p>

<h2>字符串池</h2>

<p>我在String 的java doc中又发现了一个有趣的method：intern() ,我翻译如下：</p>

<blockquote><p>当intern方法被调用，如果池中已经拥有一个与该String的字符串值相等（即equals()调用后为true）的String对象时，那么池中的那个String对象会被返回。否则，池中会增加这个对象，并返回当前这个String对象。</p></blockquote>

<p>其中有介绍一个字符串池的东西：字符串池（String pool），初始是空的，由类私有的控制。</p>

<p>查看java.lang.String的源代码，发现Intern()方法是一个native方法，即本地实现的方法，而不是一个java方法，这让我们不能直观的看到字符串池的实现细节。不过能够理解字符串池其实是类似于线程池的缓冲器，可以起到节约内存的作用。如下代码可以验证</p>

<p>```java
package biaobiaoqi.thinkingInJava;</p>

<p>public class Test {</p>

<pre><code>public static void main(String[] args){  

    String strA1 = "ab";  
    String strA2 = "c";  
    String strB1 = "a";  
    String strB2 = "bc" ;  
    System.out.println((strA1+strA2).intern() == (strB1 + strB2).intern());  

}  
</code></pre>

<p>}
```
输出结果为true。</p>

<p>现代的JVM实现里，考虑到垃圾回收（Garbage Collection）的方便，将<a href="http://en.wikipedia.org/wiki/Java_Virtual_Machine#Heap">heap</a>划分为三部分： young generation 、 tenured generation（old generation）和 permanent generation( permgen )</p>

<p>字符串池是为了解决字符串重复的问题，生命周期长，它存在于permgen中。</p>

<h2>总结</h2>

<p>编译Java源代码时，源文件中出现的双引号内的字符串都被收纳到常量池中，用CONSTANT_utf8_info项存储着。</p>

<p>JVM中，相应的类被加载运行后，常量池对应的映射到JVM的运行时常量池中。其中每项CONSTANT_utf8_info（也就试记录那些字符串的）都会在常量引用解析时，自动生成相应的internal String，记录在字符串池中。</p>

<p>回过头来看看文章刚开始的那个问题。</p>

<p><code>java
String str = new String("abc");
</code>
这里确实是有两个String对象生成了。</p>

<p><code>new String("xxx")</code> 创建的String 对象会在heap 中重新生成新的String 对象，绕过字符串池的管辖。而如果使用<code>String str = "xxx"</code>则先查看字符串池 是否已经存在，存在则直接返回PermGen中的该String 对象，否则生成新的String 对象，并将它加入字符串池中。</p>

<blockquote><p>尽量使用<code>String str = "abc";</code>，而不是<code>String str = new String("abc")；</code>用new的方法肯定会开辟新的heap空间，而前者的方法，则会通过string interning优化。</p></blockquote>

<h3>参考资料</h3>

<ul>
<li><a href="http://www.codeinstructions.com/2009/01/busting-javalangstringintern-myths.html">Busting java.lang.String.intern() Myths</a></li>
<li><a href="http://book.douban.com/subject/1788390/">Inside the JAVA2 virtual machine</a></li>
<li><a href="http://book.douban.com/subject/1610251/">Programming for the java virtual machine</a></li>
<li><a href="http://www.xyzws.com/Javafaq/what-is-string-literal-pool/3">What is String literal pool? How to create a String</a></li>
<li><a href="http://stackoverflow.com/questions/4918399/what-type-of-memory-heap-or-stack-string-constant-pool-in-java-gets-stored">What type of memory (Heap or Stack) String constant pool in Java gets stored?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java构造方法中的执行顺序]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/09/08/strange-behavior-using-braces-in-java/"/>
    <updated>2013-09-08T12:58:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/09/08/strange-behavior-using-braces-in-java</id>
    <content type="html"><![CDATA[<p>这道题来自<a href="http://stackoverflow.com/questions/8185780/strange-behavior-using-braces-in-java/8186881#8186881">stackoverflow</a>。</p>

<h2>问题描述：</h2>

<p>有如下代码，求其输出内容。</p>

<p>```java
public class Test<br/>
{</p>

<pre><code>public int a = 10;  
Test(){System.out.println("1");}  

{System.out.println("2");}  

static{System.out.println("3");}  

public static void main(String args[])  
{  
    new Test();  
}  
</code></pre>

<p>}
```</p>

<h2>分析</h2>

<p>作为静态区段的语句，容易知道，3是会最先出现的。容易弄错的一点是 到底是1和2的出现顺序。</p>

<p>我们可以参考字节码来分析。在eclipse中使用ASM bytecode 插件，得到相应的字节码：</p>

<p>```java
// class version 50.0 (50)<br/>
// access flags 0x21<br/>
public class Test {<br/>
  // compiled from: Test.java<br/>
  static <clinit>() : void</p>

<pre><code>GETSTATIC System.out : PrintStream  
LDC "3"  
INVOKEVIRTUAL PrintStream.println(String) : void  
RETURN  
</code></pre>

<p>  <init>() : void</p>

<pre><code>ALOAD 0: this  
INVOKESPECIAL Object.&lt;init&gt;() : void  
ALOAD 0: this  
BIPUSH 10  
PUTFIELD Test.a : int  
GETSTATIC System.out : PrintStream  
LDC "2"  
INVOKEVIRTUAL PrintStream.println(String) : void  
GETSTATIC System.out : PrintStream  
LDC "1"  
INVOKEVIRTUAL PrintStream.println(String) : void  
RETURN  
</code></pre>

<p>  public static main(String[]) : void</p>

<pre><code>NEW Test  
INVOKESPECIAL Test.&lt;init&gt;() : void  
RETURN  
</code></pre>

<p>}
```</p>

<p>正如我们所想，3是被放在类构造方法中，这是类的初始化函数，固然在类的初始化时出现。</p>

<!--more-->


<p>而在构造方法中先出现2，之后才是1。问题的核心集中到对象构造方法的指令顺序问题。实际上，在对象构造方法中，会先执行一些隐性的指令，比如父类的构造方法、{}区段的内容等，然后在执行显性的构造方法中的指令：</p>

<ul>
<li><ol>
<li>Java编译时，对象构造方法里先嵌入隐式的指令，完毕之后，再执行Java源代码中显示的代码。</li>
</ol>
</li>
<li>2.那些隐式的指令，包括父类的构造方法、变量的初始化、{}区段里的内容，并严格按照这个顺序嵌入到对象的构造方法中。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java类的实例化总结]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/09/08/initliate-objects-in-java/"/>
    <updated>2013-09-08T02:03:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/09/08/initliate-objects-in-java</id>
    <content type="html"><![CDATA[<p>java类的实例化(instantiation)具有显性的和隐性的区别。</p>

<p>写Java代码时，我们所使用new的方法实例化最简单直接的显性实例化。而隐性的实例化则出现在java程序的整个生命周期中，包括String、Class，StringBuffer 或者StringBuilder 的实例化等等。</p>

<h2>显性的实例化</h2>

<h3>new关键字实例化对象</h3>

<p>调用相应的构造函数完成实例化。（类中的非静态成员变量如果有初始化语句，都会被隐式的加入到构造函数中）代码如下：
```java</p>

<p>public class Test  {</p>

<pre><code>String strA = "xyz";  
String strB ;  

public Test(String str){  
    strB = str ;  
}  
public static void main(String[] args){  
        Test t = new Test("abc");  
}  
</code></pre>

<p>}<br/>
```</p>

<p>在eclipse中装了<a href="http://asm.ow2.org/">ASM bytecode</a>插件后，观察.class文件中的构造函数对应的字节码如下：</p>

<!--more-->


<p><code>
INVOKESPECIAL Object.&lt;init&gt;() : void  
   ALOAD 0: this  
   LDC "xyz"  
   PUTFIELD Test.strA : String  
   ALOAD 0: this  
   ALOAD 1: str  
   PUTFIELD Test.strB : String  
   RETURN  
</code></p>

<p>关键在于<code>LDC"xyz"</code>这条指令，明显可以看出，这是用于strA初始化的字符串。</p>

<p>由此我们可以归纳出，在没有调用本类中其他的构造函数的情况下，每次类的构造函数中都会按如下顺序进行：</p>

<ul>
<li>a)隐式（或显性）的调用父类的构造函数</li>
<li>b)然后执行写在构造函数外的成员变量的初始化赋值</li>
<li>c)最后再执行构造函数中的命令。</li>
</ul>


<p>如果是有显性的调用本类其他构造函数（必须是放在构造函数第一步执行），那么对于这个构造函数，处理过程就简单些了：</p>

<ul>
<li>a)调用那个构造函数。</li>
<li>b)执行之后的代码。</li>
</ul>


<h3>利用java反射机制</h3>

<p>反射机制是是java动态性中的关键之一，调用java.lang.reflect.Constructor的newInstance()方法能创建对象。</p>

<p>```java
public class Test  {</p>

<pre><code>public Test(){  
    System.out.println("Created by invoking newInstance()");  
}  

public Test(String str){  
    System.out.println(str);  
}  

public static void main(String[] args)  
                throws ClassNotFoundException , InstantiationException ,  
                IllegalAccessException  {  
        Test t1 = new Test("Created with new"); //常规的方法  
        Class myClass = Class.forName("Test");  //获得了对应于Test类的Class对象，如果没有加载，会先加载这个类，再返回。  
        Test t2 = (Test)myClass.newInstance(); //调用newInstance()创建对象。  
}  
</code></pre>

<p>}<br/>
```</p>

<h3>其他</h3>

<p>其他还有对象的clone()方法，以及串行化后的解串行化过程。</p>

<h2>隐性的实例化</h2>

<p>隐性的实例化主要有如下几类：</p>

<ul>
<li>1.String和String数组。main(String[] args)中拥有的args参数为String数组类型，这些command line参数将会首先被实例化。</li>
<li>2.Class的实例化。由于类的加载过程中，会生成相应类的Class对象，这些也会被隐性的实例化。</li>
<li>3.JVM在执行类加载的过程中，对常量池中的CONSTANT_String_info项会实例化出对应的String对象。这里涉及到常量池解析的知识。</li>
<li>4.在String的操作中，可能存在隐性的StringBuffer 或者StringBuilder的实例化。</li>
<li>5.int和Integer这些类型转化过程中的装箱、拆箱。</li>
</ul>


<p>比如如下代码：
``` java
public class Test  {</p>

<pre><code>public static void main(String[] args){  
        String str1 = "abc";  
        String str2 = "def";  
        String str = str1 + str2 ;  
}  
</code></pre>

<p>}<br/>
```</p>

<p>在eclipse中装了ASM bytecode插件后，直接观察.class文件对应的字节码：
```
NEW StringBuilder</p>

<pre><code>DUP  
ALOAD 1: str1  
INVOKESTATIC String.valueOf(Object) : String  
INVOKESPECIAL StringBuilder.&lt;init&gt;(String) : void  
ALOAD 2: str2  
INVOKEVIRTUAL StringBuilder.append(String) : StringBuilder  
INVOKEVIRTUAL StringBuilder.toString() : String  
ASTORE 3  
</code></pre>

<p>```</p>

<p>实际上，这里str1 和 str2合并的过程，是使用了StringBuilder来间接完成的，首先以str1的值构造一个StringBuilder，然后调用其中的append()方法，将str2串联上来。</p>

<p>值得注意的是：老版本的java使用StringBuffer完成这一步，但StringBuffer是线程安全的，效率略低，于是在新版本java中出现了非线程安全的StringBuilder，这类似于Hashtable 和 hashset的关系。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类加载器操作三原则[译]]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/09/08/three-principles-of-classloader-operation/"/>
    <updated>2013-09-08T00:42:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/09/08/three-principles-of-classloader-operation</id>
    <content type="html"><![CDATA[<p>（出自一本J2EE的教材中关于类加载器的介绍，原文已不知所踪。）</p>

<p>类加载的bug，一旦在编程中遇到很难调试。好消息是，理解类加载的过程中，我们只需要牢记住三条基本原则。如果你能清晰的理解这三条基本原则，所有问题都迎刃而解。下面，我们开始介绍。</p>

<h2>委托原则(Delegation Principle)</h2>

<blockquote><p>如果一个类还没有被加载，类加载器会委托它的父亲加载器去加载它。</p></blockquote>

<p>这种委托会一直延续，直到到达委托层次的最顶层，由原始的类加载器加载完成该类。下图展示了这种情况。</p>

<p><img src="https://dl.dropboxusercontent.com/u/64021093/Java%20Classloader/classloader1.gif" alt="" /></p>

<p>Systm-ClassPath classloader加载了MyApp.MyApp，而这个类创造了一个java.util.Vector。假设现在java.util.Vector还没又被加载。因为System-Classpath classloader加载了MyApp类，它首先请求它的父亲extension classloader来加载这个类（java.util.Vector）。而extension classloader又请求Bootstrap classloader尝试加载。因为java.util.Vector是J2SE类，bootstrap classloader成功加载了它。</p>

<!--more-->


<p>考虑一个当略微不同的情况，如下图。</p>

<p><img src="https://dl.dropboxusercontent.com/u/64021093/Java%20Classloader/classloader2.gif" alt="" /></p>

<p>在这种情况中，MyApp创造了一个新的用户自定义类的实例，MyClass。假设MyClass还没有被加载。像以往一样，当System-Classpath classloader接收到这个加载请求，它委托了它的父亲。最终这个委托传递到了Bootstrap classloader。但是在java 核心API里，找不到这个类。所以它的孩子加载器Extensions classloader尝试加载它。同样的，Extensions classloader也没有找到它。最终，委托请求回到了System-Classpath classloader这里。它找到了这个类并加载成功。</p>

<h2>可见性原则（Visibility principle）</h2>

<blockquote><p>被父亲类加载器加载的类对于孩子加载器是可见的，但关系相反相反则不可见。</p></blockquote>

<p>这说明，一个类只能看见它自己的加载器或者这个加载器的父类加载器加载的类，反过来是不可以的。比如，被ClassX的父亲加载器加载的类是不能看见ClassX的。为了更清楚的理解，让我们来看一个例子，如下图。</p>

<p><img src="https://dl.dropboxusercontent.com/u/64021093/Java%20Classloader/classloader3.gif" alt="" /></p>

<p>图中展示了四个类加载器。类加载器A是最顶层的加载器，B是它的孩子。类加载器X和Y是B的孩子。他们各自都加载了与自己同名的类。类加载器A能看见A类，类加载器B能看见A，B类。类似的，X能看见A，B，X，Y能看见A，B，Y。但兄弟、Y之间的类是不可见的。</p>

<h2>独特性原则（Uniqueness Principle）</h2>

<blockquote><p>当一个类加载器加载一个类时，它的孩子加载器绝不会重新加载这个类。</p></blockquote>

<p>这是因为委托原则中，一个加载器总是会委托自己的父亲加载器加载类。当层次中的父亲加载器无法加载类的时候，孩子类加载器就会（或者尝试去）加载这个类。这样，类加载的独特性就得到了保障。当父亲和孩子加载器加载了同一个类，一个有趣的情况就出现了。你可能会想这怎么可能出现？这不是违反了独特性原则？</p>

<p>我们用可见性原则中的示例图来解释这个问题。我们假设没有任何类被加载到这些类加载器的层次结构中。假设X类被类加载器X加载，它强制性的用类加载器X加载B类。这可以通过像Class.Name()这样的API来实现，代码如下：</p>

<p>```java
 public class X {</p>

<p>   public X() {</p>

<pre><code>  ClassLoader cl = this.getClass().getClassLoader();
  Class B = Class.forName(“B”, true, cl);
</code></pre>

<p>   }
}</p>

<p>```</p>

<p>在X的构造函数中，B被显示的使用类加载器X加载。如果另一个被类加载器B加载的类需要访问B类，则无法实现，因为委托原则只能向父亲方向查询。如果类加载器B也加载了B类，当比较两个B类的实例时，如果一个实例来自于类加载器X，一个来自于类加载器B，则会抛出ClassCastException异常。</p>

<h2>总结</h2>

<p>这三个原则 是解决程序中遇到的类加载问题的关键所在。在实际的编程中，并不需要显示的调用到类加载器，它主要出现在一些框架的代码中。但对于每一个开发者、架构师而言，都必须理解类加载的层次结构，这样才能写出优雅的代码。</p>

<h3>PS</h3>

<p>注意，虽然java的加载实现中，对于bootstrap classloader 、extensions classloader 和 system classloader来说，他们的关系是parent-first，也就是像原则一中所说的那样，需要向上委托，但用户自定义的classloader完全可以跳出这个圈子，自己实现parent-lastclassloader。比如Websphere中就有相关配置。</p>

<p>更具体的类加载器编程实例，请见另外一篇博文：<a href="http://biaobiaoqi.me/blog/2013/09/08/java-class-loader-in-practice/">《Java类加载器编程实践》</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java类的装载、链接和初始化]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/09/08/java-class-loading-linking-and-initialising/"/>
    <updated>2013-09-08T00:33:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/09/08/java-class-loading-linking-and-initialising</id>
    <content type="html"><![CDATA[<h2>加载(Loading)</h2>

<p>按如下三步执行</p>

<ul>
<li>1.通过类的全名产生对应类的二进制数据流。（注意，如果没找到对应类文件，只有在类实际使用时才抛出错误。）</li>
<li>2.分析并将这些二进制数据流转换为方法区(JVM的架构：方法区、堆，栈，本地方法栈，pc寄存器)特定的数据结构（这些数据结构是实现有关的，不同JVM有不同实现）。这里处理了部分检验，比如类文件的魔数的验证，检查文件是否过长或者过短，确定是否有父类（除了Obecjt类）。</li>
<li>3.创建对应类的 java.lang.Class 实例（注意，有了对应的Class实例，并不意味着这个类已经完成了加载链链接！）。</li>
</ul>


<h2>链接(Linking)</h2>

<p>链接的过程比加载过成复杂不少，这是实现Java的动态性的重要一步。分为三部分：验证，准备和解析。</p>

<ul>
<li><p>1.验证（verification）</p>

<p>  链接的第三部解析会把类中成员方法、成员变量、类和接口的符号引用替换为直接引用，而在这之前，需要检测被引用的类型正确性和接入属性是否正确（就是public ,private的的问题），诸如检查final class 又没有被继承，检查静态变量的正确性等等。（注意到实际上有一部分验证过程已经在加载的过程中执行了。）</p></li>
</ul>


<!--more-->


<ul>
<li><p>2.准备(preparation)</p>

<p>  对类的成员变量分配空间。虽然有初始值，但这个时候不会对他们进行初始化（因为这里不会执行任何Java代码）。具体如下：</p>

<p>  所有原始类型的值都为0。如float: 0f, int: 0, boolean: 0(注意boolean底层实现大多使用int)，引用类型则为 null。值得注意的是，JVM可能会在这个时期给一些有助于程序运行效率提高的数据结构分配空间。比如方发表（类似与C++中的虚函数表，参见另一篇博文<a href="http://biaobiaoqi.me/blog/2013/09/08/virtual-dispatch-and-method-table-in-java/">《Java：方法的虚分派和方法表》</a>）。</p></li>
<li><p>3.解析(Resolution)</p>

<p>  为类、接口、方法、成员变量的符号引用定位直接引用（如果符号引用先到常量池中寻找符号，再找先应的类型，无疑会耗费更多时间），完成内存结构的布局。</p>

<p>  这一步是可选的。可以在符号引用第一次被使用时完成，即所谓的延迟解析(late resolution)。但对用户而言，这一步永远是延迟解析的，即使运行时会执行early resolution，但程序不会显示的在第一次判断出错误时抛出错误，而会在对应的类第一次主动使用的时候抛出错误！</p>

<p>  另外，这一步与之后的类初始化是不冲突的，并非一定要所有的解析结束以后才执行类的初始化。不同的JVM实现不同。详情见另一篇博文<a href="http://localhost:4000/blog/2013/09/08/late-initialising-in-java/">《Java类加载的延迟初始化》</a>。</p></li>
</ul>


<h2>初始化类(Initialization)</h2>

<p>开发Java时，接触最多的是对象的初始化。实际上类也是有初始化的。相比对象初始化（参见博文<a href="http://localhost:4000/blog/2013/09/08/initliate-objects-in-java/">Java类的实例化</a>），类的初始化机制要简单不少。</p>

<p>类的初始化也是延迟的，直到类第一次被主动使用(active use)，JVM才会初始化类。（参见博文<a href="http://localhost:4000/blog/2013/09/08/late-initialising-in-java/">《Java类加载的延迟初始化》</a>）</p>

<p>类的初始化分两步：</p>

<ul>
<li>1.如果基类没有被初始化，初始化基类。</li>
<li><p>2.有类构造函数，则执行类构造函数。</p>

<p>  类构造函数是由Java编译器完成的。它把类成员变量的初始化和static区间的代码提取出，放到一个<clinit>的方法中。这个方法不能被一般的方法访问（注意，static final 成员变量不会在此执行初始化，它一般被编译器生成constant值）。同时，<clinit>中是不会显示的调用基类的<clinit>的，因为1中已经执行了基类的初始化。类的初始化还必须注意线程安全的问题。</p></li>
</ul>


<h3>PS：</h3>

<p>为什么接口不能定义成员变量，而只能定义final static 变量。</p>

<ul>
<li>1.接口是不可实例化，它的所有元素都不必是实例（对象）层面的。static满足了这一点。</li>
<li>2.如果接口的变量能被修改，那么一旦一个子类实现了这个接口，并修改了接口中的非final变量，而该子类的子类再次修改这个非final的变量后，造成的结果就是虽然实现了相同的接口，但接口中的变量值是不一样的。</li>
</ul>


<p>综上述，static final更适合于接口。</p>

<p>参考：<a href="http://blog.csdn.net/a352193394/article/details/6844941">《通过类字面常量解释接口常量为什么只能定义为static final,类加载过程---Thinking in java》</a></p>
]]></content>
  </entry>
  
</feed>
