<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Biaobiaoqi的博客]]></title>
  <link href="http://biaobiaoqi.me/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://biaobiaoqi.me/"/>
  <updated>2013-10-09T00:58:40+08:00</updated>
  <id>http://biaobiaoqi.me/</id>
  <author>
    <name><![CDATA[Biaobiaoqi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PAT 1065 - 1068 题解]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/10/08/pat-1065-pat-1068/"/>
    <updated>2013-10-08T13:46:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/10/08/pat-1065-pat-1068</id>
    <content type="html"><![CDATA[<p>这次的题目来源是2013年10月7日下午的浙大计算机研究生招生机试题。</p>

<p>这次题目的难度，按姥姥的说法是：『比普通的PAT要难了0.5个点。我是把自己的题目从1.0到5.0以0.5的间距分难度级别的，PAT(A)难度一般在1.5-4.5之间，保研考试一般在2.0-5.0之间。PAT(B)大概是1.0-2.5的难度。』。</p>

<p>个人认为，其中1066模拟AVL插入的实现有些细节容易弄错，而1068只要会简单的DP，也就没有问题了，1065和1066都还是很简单的实现。</p>

<p>下面是各个题的分析（PAT advanced level本人实现的全部源码：<a href="https://github.com/biaobiaoqi/CPractice/tree/master/PAT/advancedlevel">请戳</a>）。</p>

<h2><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1065">1065. A+B and C (64bit) (20)</a></h2>

<h5>题意</h5>

<p>输入三个数a，b，c，取值范围是 [<code>-2^63</code>, <code>2^63</code>]，要求判断<code>a + b &lt; c</code> 是否为真。</p>

<h5>分析</h5>

<p>很简单的签到题，想到两种方法：一是用Java的Big Decimal实现（应该不会超时吧-,-），二是对a+b造成的long long溢出的情况做特殊处理。</p>

<p>对于分情况的实现方式，实际上也就两种特殊情况，即a，b同号且两者之和溢出了（绝对值超过了2<sup>63）。此时两者之和与c的值的相对关系也是确定的。</sup></p>

<ul>
<li><code>a &lt; 0 &amp;&amp; b &lt; 0 &amp;&amp; a + b &gt;= 0</code>: a + b 必小于c</li>
<li><code>a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; a + b &lt;= 0</code>: a + b 必大于c</li>
</ul>


<p>另在98看见有大神说可以用long double水过去-,-.</p>

<p>pat1065源码:<a href="https://github.com/biaobiaoqi/CPractice/blob/master/PAT/advancedlevel/APAT1065.cpp">请戳</a></p>

<h2><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1066">1066. Root of AVL Tree (25)</a></h2>

<h5>题意</h5>

<p>实现<a href="http://en.wikipedia.org/wiki/AVL_tree">AVL树</a>的插入方法，给定N(&lt;=20)个数，要求输出依次插入后的AVL树的根。</p>

<h5>分析</h5>

<p>由于节点少，可以使用相对简单的递归实现方法：</p>

<ul>
<li>每个节点维护一个高度值，用在递归插入后检测子树是否平衡</li>
<li>完成4个旋转方法（参见<a href="http://en.wikipedia.org/wiki/AVL_tree">AVL Tree wikipedia</a>中的示意图）</li>
<li>在递归插入方法中，完成对子树的插入后，检测子树高度差，根据子树的结构特点，做出相应的旋转</li>
<li>旋转后记得更新节点的高度值</li>
</ul>


<p>机试时似乎没有人完全AC这道题，看来代码实现和Debug能力缺乏还是比较普遍的问题。</p>

<p>pat1066源码:<a href="https://github.com/biaobiaoqi/CPractice/blob/master/PAT/advancedlevel/APAT1066.cpp">请戳</a></p>

<!--more-->


<h2><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1067">1067. Sort with Swap(0,*) (25)</a></h2>

<h5>题意</h5>

<p>给定N(&lt;=<code>10^5</code>)以及一个{0,1,…,N-1}的打乱的数列。</p>

<p>定义了一种交换方式：<code>Swap(0,*)</code>，表示将0和任意数进行位置交换。</p>

<p>限定只能使用<code>Swap(0,*)</code>，要求输出最少需要多少次交换操作，来完成整体的排序。</p>

<h5>分析</h5>

<p>很好玩的模拟题，从题目的两个测试数据入手，找到所需要的交换次数的特点：</p>

<p>假设用数组a存储输入的数组，数组的坐标为[0, N - 1]，而元素的所有值也是[0, N - 1]。</p>

<ol>
<li><p>输入的序列中本就在自己位置上的数字，是不用被交换的（比如序列<code>{4, 0, 2, 1, 3}</code>中2就是不用被交换），0除外</p></li>
<li><p>0最终肯定会被放回到0的位置上，但交换过程中，0也可能被提前交换到了0的位置上，此时还有其他数没有处于正确的位置上（参见Sample Input<code>{10 3 5 7 2 6 4 9 0 8 1}</code>的情况）。此时需要多费一步将0和某一个处于不正确位置的数交换位置，来继续排序。</p></li>
<li><p>每次的交换，0其实只是一个过渡作用。实际的交换过程遵循的链式关系如下所述：设定a[x] == b， 而 b != x，则需要将a[x]的值移动到a[b]上，此时a[b] == c, 那么接着又需要将 a[b]的值移动到a[c]上，以此类推，肯定能获得一个循环，且节点数 M 小于等于 N。如果循环中包含了0，那么这个循环中的数排序所需要的交换次数为 M - 1, 如果循环中不包含0，那么首先需要一次交换将0移动到循环链中，此时整个循环链节点数增加了1，于是共需要开销 M + 1 次交换。</p></li>
<li><p>根据3的分析，在2的情况下，0与不同的不在正确位置的数的交换，是不会影响最终的结果的。</p></li>
</ol>


<p>综上所述，用类似dfs或者并查集的思路找到集合中的所有循环链路，记录下他们的大小，即可计算出所需要的交换次数。</p>

<p>pat1067源码:<a href="https://github.com/biaobiaoqi/CPractice/blob/master/PAT/advancedlevel/APAT1067.cpp">请戳</a></p>

<h2><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1068">1068. Find More Coins (30)</a></h2>

<h5>题意</h5>

<p>给定 N(&lt;=<code>10^4</code>) 枚硬币和一个价格 M(&lt;=100)。</p>

<p>要求用这 N 枚硬币组合出价格 M，如果有多种组合，输出排序后硬币面值字典序最小的组合，如果没有组合，则输出 No Solution.</p>

<h5>分析</h5>

<p>裸背包问题，相关资料参见dd大神的总结：<a href="http://cuitianyi.com/blog/%E3%80%8A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E4%B9%9D%E8%AE%B2%E3%80%8B2-0-alpha1/">《背包问题九讲》</a></p>

<p>按照常规的背包思路，构建10001 * 101 的二维数组f[i][j]，状态f[i][j]表示前i枚硬币能拼凑出的小于等于j的最大值（j这里代表一个价格）。</p>

<p>状态转移方程为：<code>f[i][j] = max(f[i - 1][j], f[i - 1][j - c[i]] + c[i])</code>， 其中c[i]为第i枚硬币的面值，c[i]为排序过的硬币面值数组。</p>

<p>由于最终的输出要求是排序的币值的字典序最小的组合，可以对c[i]做从大到小的排序，并另开一个数组has[i][j]来记录当前状态下，是否有包含c[i]。同时注意，当<code>f[i - 1][j] == f[i - 1][j - c[i]] + c[i]</code>时，采纳当前的c[i]，以满足字典序。</p>

<p>pat1068源码:<a href="https://github.com/biaobiaoqi/CPractice/blob/master/PAT/advancedlevel/APAT1068.cpp">请戳</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重置MBP的NVRAM]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/10/07/reset-nvram/"/>
    <updated>2013-10-07T23:25:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/10/07/reset-nvram</id>
    <content type="html"><![CDATA[<h3>遇到问题</h3>

<p>今天的中国好声音决赛之夜，我的Mac突然无法发出声响了=(，在此之前，刚看过一些视频，音频输出正常。</p>

<p>我尝试了使用MBP内建的外放和插入iphone4s的耳机并将音量调整到最大，没有任何声响。网上查阅了一些相关异常的资料，发现可能是NVRAM的问题。官方资料见链接：<a href="http://support.apple.com/kb/HT1379?viewlocale=zh_CN">《关于 NVRAM 和 PRAM》</a>。</p>

<p>按照重置NVRAM的方法操作后，果然Mac又拥有了声音，可以看好声音啊=)</p>

<p>这里对NVRAM做一些记录：</p>

<h3>NVRAM</h3>

<p>Mac 会将某些设置储存在特殊内存区域中，而且即使关机这些设置也不会丢失。在基于 Intel 的 Mac 上，存储位置是称为 NVRAM 的内存。NVRAM为Non-Volatile Random Access Memory的缩写。</p>

<p>存储在 NVRAM/PRAM 中的信息包括：</p>

<ul>
<li>扬声器音量</li>
<li>屏幕分辨率</li>
<li>启动磁盘选择</li>
<li>最近的内核崩溃信息（如果有的话）</li>
</ul>


<!--MORE-->


<p>也就是说，如果机器存在声音、屏幕分辨率、启动速度等方面的异常时，可以尝试使用重置的方式做恢复。同时，官方资料中也提到，『如果您正在故障诊断网络问题，重置不会有任何帮助』。</p>

<h3>配置NVRAM</h3>

<p>实际上，也可以在shell中命令配置nvram。比如，可以通过<code>nvram -xp</code>命令查看到xml格式的配置表示。我的如下：</p>

<p>```
$ nvram -xp
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict></p>

<pre><code>&lt;key&gt;LocationServicesEnabled&lt;/key&gt;
&lt;data&gt;
AQ==
&lt;/data&gt;
&lt;key&gt;SystemAudioVolume&lt;/key&gt;
&lt;data&gt;
Xw==
&lt;/data&gt;
&lt;key&gt;backlight-level&lt;/key&gt;
&lt;data&gt;
9wA=
&lt;/data&gt;
&lt;key&gt;fmm-computer-name&lt;/key&gt;
&lt;data&gt;
Ymlhb2JpYW9xaQ==
&lt;/data&gt;
</code></pre>

<p></dict>
</plist>
```</p>

<h3>其他参考</h3>

<ul>
<li><a href="http://blog.csdn.net/afatgoat/article/details/3851554">Mac OS X: 系统nvram启动参数</a></li>
<li><a href="http://support.apple.com/kb/HT1895?viewlocale=zh_CN">何时要重置 NVRAM 或 PRAM</a></li>
<li><a href="http://en.wikipedia.org/wiki/Non-volatile_random-access_memory">NVRAM wikipedia</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java类、实例的初始化顺序]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/09/22/java-initialization/"/>
    <updated>2013-09-22T21:53:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/09/22/java-initialization</id>
    <content type="html"><![CDATA[<p>今晚是阿里巴巴2013校园招聘的杭州站笔试。下午匆忙看了两张历年试卷，去现场打了瓶酱油。</p>

<p>题目总体考察点偏基础，倒数第二题（Java附加题）比较有趣，考察了Java初始化机制的细节，在此摘录出来。</p>

<h2>题目</h2>

<p>求如下java代码的输出：</p>

<p>``` java</p>

<p>class T  implements Cloneable{</p>

<pre><code>public static int k = 0;
public static T t1 = new T("t1");
public static T t2 = new T("t2");
public static int i = print("i");
public static int n = 99;

public int j = print("j");
{
    print("构造快");
}

static {
    print("静态块");
}

public T(String str) {
    System.out.println((++k) + ":" + str + "    i=" + i + "  n=" + n);
    ++n; ++ i;
}

public static int print(String str){
    System.out.println((++k) +":" + str + "   i=" + i + "   n=" + n);
    ++n;
    return ++ i;
}

public static void main(String[] args){
    T t = new T("init");
}
</code></pre>

<p>}</p>

<p>```</p>

<h2>分析</h2>

<p>代码主要考察的是类、变量初始化的顺序。</p>

<p>一般的，我们很清楚类需要在被实例化之前初始化，而对象的初始化则是运行构造方法中的代码。</p>

<p>本题的代码显然没有这么简单了。本题中涉及到了<code>static {…}</code> 和 <code>{…}</code>这种形式的代码块，以及在类的静态变量中初始化该类的对象这种交错的逻辑，容易让人焦躁（类似于密集恐惧症吧=(）。实际上，按照<a href="http://biaobiaoqi.me/blog/2013/09/08/java-class-loading-linking-and-initialising/">类的装载、链接和初始化逻辑</a>，以及<a href="http://biaobiaoqi.me/blog/2013/09/08/strange-behavior-using-braces-in-java/">对象初始化的顺序</a>来思考，不难得到答案。</p>

<!--more-->


<h3>代码组成</h3>

<ul>
<li><p>成员变量
  2~6行的变量是static的，为类T的静态成员变量，需要在类加载的过程中被执行初始化；第8行的<code>int j</code>则为实例成员变量，只再类被实例化的过程中初始化。</p></li>
<li><p>代码段
  9~11行为实例化的代码段，在类被实例化的过程中执行；13~15行为静态的代码段，在类被加载、初始化的过程中执行。</p></li>
<li><p>方法
  方法<code>public static int print(String str)</code> 为静态方法，其实现中牵涉到k,i,n三个静态成员变量，实际上，这个方法是专门用来标记执行顺序的方法；T的构造方法是个实例化方法，在T被实例化时调用。</p></li>
<li><p>main方法
  main方法中实例化了一个T的实例。</p></li>
</ul>


<h3>执行顺序分析</h3>

<p>在一个对象被使用之前，需要经历的过程有：类的装载 -> 链接（验证 -> 准备 -> 解析） -> 初始化 -> 对象实例化。（详情参见<a href="http://biaobiaoqi.me/blog/2013/09/08/java-class-loading-linking-and-initialising/">《Java类的装载、链接和初始化》</a>），这里需要注意的点主要有：</p>

<ul>
<li><p>在类链接之后，类初始化之前，实际上类已经可以被实例化了。</p>

<p>  就如此题代码中所述，在众多静态成员变量被初始化完成之前，已经有两个实例的初始化了。实际上，此时对类的实例化，除了无法正常使用类的静态承运变量以外（还没有保证完全被初始化），JVM中已经加载了类的内存结构布局，只是没有执行初始化的过程。比如第3行<code>public static T t1 = new T("t1");</code>，在链接过程中，JVM中已经存在了一个t1，它的值为null，还没有执行<code>new T("t1")</code>。又比如第5行的<code>public static int i = print("i");</code>，在没有执行初始化时，i的值为0，同理n在初始化前值也为0.</p></li>
<li><p>先执行成员变量自身初始化，后执行<code>static {…}</code>、<code>{…}</code>代码块中的内容。</p>

<p>  如此策略的意义在于让代码块能处理成员变量相关的逻辑。如果不使用这种策略，而是相反先执行代码块，那么在执行代码块的过程中，成员变量并没有意义，代码块的执行也是多余。</p></li>
<li><p>类实例化的过程中，先执行隐式的构造代码，再执行构造方法中的代码
  这里隐式的构造代码包括了<code>{}</code>代码块中的代码，以及实例成员变量声明中的初始化代码，以及父类的对应的代码（还好本题中没有考察到父类这一继承关系，否则更复杂;)）。为何不是先执行显示的构造方法中的代码，再执行隐式的代码呢？这也很容易解释：构造方法中可能就需要使用到实例成员变量，而这时候，我们是期待实例变量能正常使用的。</p></li>
</ul>


<p>有了如上的分析，也就能推到出最终的输出结果了。实际上，这几个原则都不需要死记硬背，完全能通过理解整个JVM的执行过程来梳理出思路的。</p>

<h2>答案</h2>

<p>```</p>

<p>1:j   i=0   n=0
2:构造快   i=1   n=1
3:t1    i=2  n=2
4:j   i=3   n=3
5:构造快   i=4   n=4
6:t2    i=5  n=5
7:i   i=6   n=6
8:静态块   i=7   n=99
9:j   i=8   n=100
10:构造快   i=9   n=101
11:init    i=10  n=102</p>

<p>```</p>

<h3>参考：</h3>

<ul>
<li><a href="http://biaobiaoqi.me/blog/2013/09/08/strange-behavior-using-braces-in-java/">《Java构造方法中的执行顺序》</a></li>
<li><a href="http://biaobiaoqi.me/blog/2013/09/08/java-class-loading-linking-and-initialising/">《Java类的装载、链接和初始化》</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于科学上网]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/09/10/scientifically-surfing-the-internet/"/>
    <updated>2013-09-10T12:11:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/09/10/scientifically-surfing-the-internet</id>
    <content type="html"><![CDATA[<p>为了防止被某墙fuck，暂且称其为『很棒的防火墙』吧，你懂的-,-.</p>

<p>在teahour上听了 <a href="http://teahour.fm/2013/07/09/gfw-and-vpncloud.html">***技术研究和云梯产品故事</a>，有感于之前几天修改本地hosts的策略再次失效，切换到goagent模式，在此，基于这期teahour对<a href="https://twitter.com/kgen">@Kgen</a>的访谈内容，对很棒的防火墙做份简单的笔记：</p>

<p>很棒的防火墙有用大量的服务器，并由一大只团队维护和升级。它的目的是让大部分的互联网用户无法接触到“有害”的网络资源，“净化”国内的网络环境。同时，它需要尽可能的减少商业上的影响，比如为了不阻碍外企的VPN工作环境，很棒的防火墙并没有直接对VPN进行封堵。在这个前提上，留给我们的可能性也是一直存在的。</p>

<h2>防御策略</h2>

<p>很棒的防火墙一直在茁壮成长着。一个方校长倒下了，千千万万X校长站起来了。他们背负着一辈子的骂名，忍辱负重的为祖国奉献着生命，死而后已。总之，前赴后继的技术人员不断的在补全着很棒的防火墙的防御规则，因此，应对策略也需要不断的调整和改进。整体来看，防御策略主要有如下几种：</p>

<ul>
<li><h4>1.DNS污染</h4>

<p>  DNS协议本身并没有安全认证功能，很棒的防火墙检测到相应dns请求后，会返回一个错误的IP地址，造成无法正常访问。解决方案有使用第三方DNS服务或者修改本地hosts文件。</p></li>
<li><h4>2.IP拦截</h4>

<p>  对于特定敏感网站，很棒的防火墙会直接侦察到相应的IP地址施行拦截。简单的DNS修改无法解决IP层的问题，只能通过代理等手段绕过这些IP进行访问。常用的应对方式有：使用VPN、ssh代理和GAE上搭建<a href="http://zhoudemin.com/goagent.html">GoAgent</a>服务等。至于为什么一些国内用户说自己的GoAgent速度很快，而又有很多人在抱怨自己的GAE速度很慢，原因在于GAE应用会不受控制的部署到Google不同的服务器节点上，而国内网络环境复杂，不同地区的网络连入国外不同服务器的线路不尽相同，速度也差异明显。同样的情况也发生在VPS的使用速度差异上。</p></li>
</ul>


<!--more-->


<ul>
<li><h4>3.端口封锁：比如ssh端口</h4>

<p>  <a href="http://biaobiaoqi.me/blog/2013/04/19/use-ssh/">ssh</a>是一种安全的加密的网络通信协议，通过ssh可以施行对远程主机的操控。部分网民通过在很棒的防火墙外的VPS（虚拟主机）做代理，使用ssh服务上网。针对这一情况，最近两年，很棒的防火墙开始实现对ssh端口的封锁。当ssh链接被鉴定为非正常流量，则相应端口会受到封锁。如果频繁切换端口，可能整个IP都将被封锁。</p></li>
<li><h4>4.http请求明文内容检测和中断</h4>

<p>  使用Google搜索某些敏感内容时，链接会被重置，就是因为很棒的防火墙侦测到了敏感内容，给用户浏览器发送了重置消息，扰乱了链接。</p></li>
<li><h4>5.https间歇性中断</h4>

<p>  https的链接本身是安全的、加密的。在无法侦测内容的前提下，很棒的防火墙采用了不讲道理的间歇性中断策略。</p></li>
</ul>


<p>更多关于很棒的防火墙的资料，请先翻过墙去查看;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对Java字符串的探究]]></title>
    <link href="http://biaobiaoqi.me/blog/2013/09/08/string-interning/"/>
    <updated>2013-09-08T13:01:00+08:00</updated>
    <id>http://biaobiaoqi.me/blog/2013/09/08/string-interning</id>
    <content type="html"><![CDATA[<h2>问题的出发点</h2>

<p>在网上看到一道题：</p>

<p><code>java
String str = new String("abc");  
</code></p>

<p>以上代码执行过程中生成了多少个String对象？</p>

<p>答案写的是两个。"abc"本身是一个，而new又生成了一个。</p>

<h2>"abc"是什么</h2>

<p>查看这句程序的字节码，如下：
```
NEW String</p>

<pre><code>DUP  
LDC "abc"  
INVOKESPECIAL String.&lt;init&gt;(String) : void  
ASTORE 1   
</code></pre>

<p><code>``
指令</code>ldc indexbyte`的含义：将两字节的值从indexbyte索引的常量池中的项中推到方法栈上。</p>

<p>指令<code>LDC "abc"</code>说明了"abc"并不是直接以对象存在的，而是存在于常量池的索引中。String的构造函数调用命令实际使用的就是String类型作为参数，那么，栈上应该有一个String类型的索引。</p>

<p>由此我们得出，在字节码中，ldc命令在常量池中找到了能索引到“abc”那个String对象的索引值。</p>

<h2>常量池</h2>

<p>常量池是类文件（.class）文件中的一部分，记录了许多常量信息，索引的字符串信息。</p>

<p>由于Java是动态加载的，类文件并没有包含程序运行时的内存布局，方法调用等无法直接记录出方法的物理位置，常量池通过索引的方法解决了这个问题。</p>

<!--more-->


<p>常量池中存着许多表，其中Constant_Utf8_info表中，记录着会被初始化为String对象的字符串的字面值（iteral）。
而在String 的java doc中，有对String字面值的说明：</p>

<blockquote><p>All string literals in Java programs, such as "abc", are implemented as instances of this class.</p></blockquote>

<p>在Java编译的过程中，确定下来的String字面值都先被优化记录在常量池中（那些双引号字符串，都是以CONSTANT_utf8_info的形式存储在常量池中的）。也就是说，Java源代码文件中出现的那些诸如"abc"字符串，都已经被提前放在了常量池中。</p>

<p>可以使用如下代码验证这一点：</p>

<p>```java
public class Program<br/>
{</p>

<pre><code>public static void main(String[] args)  
{  
   String str1 = "Hello";    
   String str2 = "Hello";   
   System.out.print(str1 == str2);  
}  
</code></pre>

<p>}<br/>
```</p>

<p>输出结果是true.说明"Hello"作为对象是被程序从同一个内存空间读取出来的。</p>

<p>常量池是编译时产生的，存在于类文件中（*.class文件）。运行时，JVM中每个对象都拥有自己的运行时常量池（run time constant pool）。</p>

<h2>字符串池</h2>

<p>我在String 的java doc中又发现了一个有趣的method：intern() ,我翻译如下：</p>

<blockquote><p>当intern方法被调用，如果池中已经拥有一个与该String的字符串值相等（即equals()调用后为true）的String对象时，那么池中的那个String对象会被返回。否则，池中会增加这个对象，并返回当前这个String对象。</p></blockquote>

<p>其中有介绍一个字符串池的东西：字符串池（String pool），初始是空的，由类私有的控制。</p>

<p>查看java.lang.String的源代码，发现Intern()方法是一个native方法，即本地实现的方法，而不是一个java方法，这让我们不能直观的看到字符串池的实现细节。不过能够理解字符串池其实是类似于线程池的缓冲器，可以起到节约内存的作用。如下代码可以验证</p>

<p>```java
package biaobiaoqi.thinkingInJava;</p>

<p>public class Test {</p>

<pre><code>public static void main(String[] args){  

    String strA1 = "ab";  
    String strA2 = "c";  
    String strB1 = "a";  
    String strB2 = "bc" ;  
    System.out.println((strA1+strA2).intern() == (strB1 + strB2).intern());  

}  
</code></pre>

<p>}
```
输出结果为true。</p>

<p>现代的JVM实现里，考虑到垃圾回收（Garbage Collection）的方便，将内存区域<a href="http://en.wikipedia.org/wiki/Java_Virtual_Machine#Heap">heap</a>划分为三部分： young generation 、 tenured generation（old generation）和 permanent generation( permgen )</p>

<p>字符串池是为了解决字符串重复的问题，生命周期长，它存在于permgen中。</p>

<h2>总结</h2>

<p>编译Java源代码时，源文件中出现的双引号内的字符串都被收纳到常量池中，用CONSTANT_utf8_info项存储着。</p>

<p>JVM中，相应的类被加载运行后，常量池对应的映射到JVM的运行时常量池中。其中每项CONSTANT_utf8_info（也就试记录那些字符串的）都会在常量引用解析时，自动生成相应的internal String，记录在字符串池中。</p>

<p>回过头来看看文章刚开始的那个问题。</p>

<p><code>java
String str = new String("abc");
</code>
这里确实是有两个String对象生成了。</p>

<p><code>new String("xxx")</code> 创建的String 对象会在heap 中重新生成新的String 对象，绕过字符串池的管辖。而如果使用<code>String str = "xxx"</code>则先查看字符串池 是否已经存在，存在则直接返回PermGen中的该String 对象，否则生成新的String 对象，并将它加入字符串池中。</p>

<blockquote><p>尽量使用<code>String str = "abc";</code>，而不是<code>String str = new String("abc")；</code>用new的方法肯定会开辟新的heap空间，而前者的方法，则会通过string interning优化。</p></blockquote>

<h3>参考资料</h3>

<ul>
<li><a href="http://www.codeinstructions.com/2009/01/busting-javalangstringintern-myths.html">Busting java.lang.String.intern() Myths</a></li>
<li><a href="http://book.douban.com/subject/1788390/">Inside the JAVA2 virtual machine</a></li>
<li><a href="http://book.douban.com/subject/1610251/">Programming for the java virtual machine</a></li>
<li><a href="http://www.xyzws.com/Javafaq/what-is-string-literal-pool/3">What is String literal pool? How to create a String</a></li>
<li><a href="http://stackoverflow.com/questions/4918399/what-type-of-memory-heap-or-stack-string-constant-pool-in-java-gets-stored">What type of memory (Heap or Stack) String constant pool in Java gets stored?</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
