<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: think | Biaobiaoqi的博客]]></title>
  <link href="http://biaobiaoqi.github.com/blog/categories/think/atom.xml" rel="self"/>
  <link href="http://biaobiaoqi.github.com/"/>
  <updated>2013-05-12T01:55:20+08:00</updated>
  <id>http://biaobiaoqi.github.com/</id>
  <author>
    <name><![CDATA[Biaobiaoqi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的MBTI职业性格测试]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/05/12/mbti-test/"/>
    <updated>2013-05-12T01:04:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/05/12/mbti-test</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>最近在看<a href="http://book.douban.com/subject/5372651/">《程序员的思维训练——开发人之前能的九堂课》</a>，其中讲到了<a href="http://wiki.mbalib.com/wiki/MBTI%E4%BA%BA%E6%A0%BC%E7%90%86%E8%AE%BA">MBTI职业性格测试</a>的指导意义。记起来两年多以前在面试ASES的时候有做过这个测试，只可惜当时的测试结果在好几次的更换电脑的过程中不知踪影了。最近自己的思考也集中在认知领域，于是重新找到那个链接，做了一次测试。<a href="http://www.apesk.com/mbti/">点击链接测试</a>，正文是我的测试结果。</p>

<p>我也使用了另一个在线MBTI来检验测试结果，相差不大。一个是ENTJ（本文的测试结果），一个是ENFJ（E:8,I:2,S:8,N:12,T:10,F:10,J:11,P:9），差别不大。</p>

<p>总的来说，这是一个带有个人倾向性的测试结果，至于结果对不对，这都不重要。能在对测试结果的分析中，反省自身，那就够了。</p>

<!--more-->


<blockquote><p>知己知彼，百战不殆</p></blockquote>

<h2>ENTJ 统帅型——一切尽在掌握</h2>

<h3>一、你的MBTI图形</h3>

<p><img src="http://dl.dropboxusercontent.com/u/64021093/Pics/D567480F-DB00-481E-9AEF-08EBFC61E0B1.png" title="Title" alt="alt text" /></p>

<ul>
<li> 倾向示意图表示四个维度分别的倾向程度。从中间往两侧看，绿色指示条对应下面坐标的哪个区间。</li>
</ul>


<h3>二、基本描述</h3>

<p>才储分析：您的性格类型倾向为“ ENTJ ”(外向 直觉 思维 判断 倾向度： E75 N80 T52 J80  不假思索指数：15)</p>

<p>坦诚、果断，有天生的领导能力。能很快看到公司/组织程序和政策中的不合理性和低效能性，发展并实施有效和全面的系统来解决问题。善于做长期的计划和目标的设定。通常见多识广，博览群书，喜欢拓广自己的知识面 并将此分享给他人。在陈述自己的想法时非常强而有力。</p>

<p>ENTJ型的人是伟大的领导者和决策人。他们能轻易地看出事物具有的可能性，很高兴指导别人，使他们的想象成为现实。他们是头脑灵活的思想家和伟大的长远规划者。因为ENTJ型的人很有条理和分析能力，所以他们通常 对要求推理和才智的任何事情都很擅长。为了在完成工作中称职，他们通常会很自然地看出所处情况中可能存在的缺陷，并且立刻知道如何改进。他们力求精通整个体系，而不是简单地把它们做为现存的接受而已。 ENTJ型 的人乐于完成一些需要解决的复杂问题，他们大胆地力求掌握使他们感兴趣的任何事情。 ENTJ型的人把事实看得高于一切，只有通过逻辑的推理才会确信。 ENTJ型的人渴望不断增加自己的知识基础，他们系统地计划和研 究新情况。他们乐于钻研复杂的理论性问题，力求精通任何他们认为有趣的事物。他们对于行为的未来结果更感兴趣，而不是事物现存的状况。 ENTJ型的人是热心而真诚的天生的领导者，他们往往能够控制他们所处的任何 环境。因为他们具有预见能力，并且向别人传播他们的观点，所以他们是出色的群众组织者。他们往往按照一套相当严格的规律生活，并且希望别人也是如此。因此他们往往具有挑战性，同样艰难地推动自我和他人前进。</p>

<p>您适合的领域有：工商业、政界、金融和投资领域、管理咨询、培训、专业性领域</p>

<p>您适合的职业有：</p>

<ul>
<li>各类企业的高级主管</li>
<li>总经理</li>
<li>企业主</li>
<li>社会团体负责人</li>
<li>政治家</li>
<li>投资银行家</li>
<li>风险投资家</li>
<li>股票经纪人</li>
<li>公司财务经理</li>
<li>财务顾问</li>
<li>经济学家</li>
<li>企业管理顾问</li>
<li>企业战略顾问</li>
<li>项目顾问</li>
<li>专项培训师</li>
<li>律师</li>
<li>法官</li>
<li>知识产权专家</li>
<li>大学教师</li>
<li>科技专家</li>
<li>房产开发商</li>
<li>教育咨询顾问</li>
<li>投资顾问</li>
<li>（人事、销售、营销）经理</li>
<li>技术培训人员</li>
<li>（后勤、电脑信息服务和组织重建）顾问</li>
<li>国际销售经理</li>
<li>特许经营业主</li>
<li>程序设计员</li>
<li>环保工程师</li>
</ul>


<h3>三、气质类型</h3>

<p>根据大卫.凯尔西（David Keirsey）气质与性情理论，你属于“概念主义者”，下面是对“概念主义者”的描述：</p>

<p>“概念主义者”型的人自信、有智慧、富有想像力。他们的原则是“所有的事情都要做到最好”。</p>

<p>“概念主义者”是最独立的一种人。他们工作原则性强，标准高，对自己和对别人的要求都很严格。他们不会被别人的冷 遇和批评干扰，喜欢以自己的方式做事。</p>

<p>“概念主义者”型的人天生好奇，无论是由于工作本身的需要还是出于长远的考虑，他们很喜欢不断地吸取知识，他们因此而常常看 得到同一问题的多个不同的方面，习惯于全面地、概括地思考问题，和一分为二地看待问题。他们很善于发现事物的可能性，理解事 物的复杂性，喜欢进行逻辑的分析，从而对真实或假设的问题构思出解决方案。</p>

<p>“概念主义者”喜欢能够提供自由、变化和需要有较高的智力才能完成的工作，不喜欢简单、重复的工作。他们喜欢看到自己的想法 能够得到实施。“概念主义者”会对那些他们认为不够能干的人不耐烦，喜欢与很有能力的上司、下属、同事共事。许多“概念主义 者”型的人推崇权力，易于被有权力的人和权力地位所吸引。</p>

<h6>总体描述</h6>

<ol>
<li>善于分析、总结、判断</li>
<li>善于从整体上把握事物</li>
<li>喜欢追根究底，力图抓住事物的本质</li>
<li>对文字、语言敏感</li>
<li>抽象思维能力强，能理解复杂的理论概念，善于将事情概念化，善于从中推断出原则或预测趋势</li>
<li>擅长策略性思维</li>
<li>会接受建设性的批评，而不把它当作针对个人的问题</li>
</ol>


<h6>潜在的弱点</h6>

<ol>
<li>由于有时给自己定了不切实际的高标准，可能对自己和他人的期望过高</li>
<li>易于像紧逼自己工作一样去逼着别人工作</li>
<li>常常不希望别人对抗自己的意愿，有时给人顽固、死板的印象</li>
<li>易于过份强调工作，从而损害了家庭的和谐</li>
<li>常常不记得花时间夸奖同事、下属或其他人</li>
<li>常常忽视了一些工作中所需要的社交礼仪</li>
<li>有时没有注意到他人的情绪感受，从而给人冷漠、不近人情的印象</li>
<li>有时会因忽略了细节而没有注意到周围环境的变化</li>
<li>易于过于理论化而不考虑实际情况，易受远景规划诱惑，难以具体落实</li>
<li>有时想法太多，不知道哪些切实可行，不知道真正应该做什么</li>
</ol>


<h3>四、优势与劣势</h3>

<p>ENTJ的特质： 统帅型——一切尽在掌握</p>

<h5>优势：</h5>

<p>你直率、果断，能够妥善解决组织的问题，是天生的领导者和组织的创建者。你擅长发现一切事物的可能性并很愿意指导他人实现梦想，是思想家和长远规划者。</p>

<p>你逻辑性强，善于分析，能很快地在头脑里形成概念和理论，并能把可能性变成计划。树立自己的标准并一定要将这些标准强加于他人。你看重智力和能力，讨厌低效率，如果形势需要，可以非常强硬。你习惯用批判的眼光看待事物，随时可以发现不合逻辑和效率低的程序并强烈渴望修正它们。</p>

<p>你善于系统、全局地分析和解决各种错综复杂的问题，为了达到目的，你会采取积极行动，你喜欢研究复杂的理论问题，通过分析事情的各种可能性，事先考虑周到，预见问题，制定全盘计划和制度并安排好人和物的来源，推动变革和创新。</p>

<p>愿意接受挑战，并希望其他人能够象自己一样投入，对常规活动不感兴趣。长于需要论据和机智的谈吐的事情，如公开演讲之类。</p>

<h5>劣势：</h5>

<p>你经常在没有了解细节和形势之前就草率地做决定。</p>

<p>你总是很客观、带有批判性地对待生活，容易对别人的情况和需要表现得较粗心、直率、无耐心。建议你注意倾听周围人的心声，并对别人的贡献表示赞赏。你需要学会在实施自己的计划之前听取别人的建议，以免独断专横。</p>

<p>你考虑问题非常理智，很少受无关因素影响。你没有时间和兴趣去体会情感，容易忽略他人的感受，显得不尽人情。但当你的感情被忽视或没有表达出来的时候，你会非常敏感。你们需要给自己一点儿时间来了解自己的真实感情，学会正确地释放自己的情感，而不是爆发，并获得自己期望和为之努力的地位。
你容易夸大自己的经验、能力。 你需要接受他人实际而有价值的协助，才能更好的提高能力并获得成功。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《谁是谷歌想要的人才？》]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/20/are-you-smart-enough-to-work-at-google/"/>
    <updated>2013-04-20T00:47:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/20/are-you-smart-enough-to-work-at-google</id>
    <content type="html"><![CDATA[<p><em>道理都明白，还得靠自己</em></p>

<h3>关于本书</h3>

<p>藉由大多数程序员天然的对google怀有的朝圣般的向往和喜爱，开始看<a href="http://book.douban.com/subject/21329264/">这本书</a>。</p>

<p><img class="left" src="http://img.cnbeta.com/upimg/121231/raymon725_1451506190985.jpg" width="250" height="400" title="Place Kitten #2" ></p>

<p>书中的中文版序的标题就是“跳出框框来思考”，这种观点倒不是第一次见到了，甚至可以说，这些观点充斥于互联网上的各种流传、经验贴中。但这并不意味着我们不需要再花时间在这种书上。道理都懂，就是做不好已经成为这个信息通畅的时代的特征之一。正所谓“纸上得来终觉浅，绝知此事要躬行”。</p>

<!--more-->


<p>而如果有一个“躬行”过的人再将他的感受娓娓道来，辅以自己的用心体会，或许会事半功倍呢。这就是我想通过这本书得到的。如下几点，让这个想法成为可能：</p>

<ul>
<li>1.这本书并不单单是一个题集，大约有一般的篇目是在讲述题记，另外一半的篇目，则是代入感颇强的为什么要这么思考的叙述。后者看似无关功利，但却可以给人足够的心理暗示和支撑，以提升良好思考习惯在内心的重要性。</li>
<li>2.作者庞德斯通写过不少充满思维的力量书。</li>
</ul>


<p>认同归认同，关键的还是自己的所得。下面是我的一些思考。</p>

<h3>我的思考</h3>

<ul>
<li>1.解决问题的思路：问题域 --> 结果</li>
<li><ul>
<li>问题域：需要慎重思考，充分利用资源，限定问题域的边界。往往很多题目是在没有弄清楚题意的情况下开始解答而得不到好的答案。</li>
</ul>
</li>
<li><ul>
<li>问题域向结果推演：首先是发散式的头脑风暴（发现尽可能多的维度的才想），然后再依次的理性分析，找本质规律，内在联系，向结果靠拢。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>2.分析过程中，有些需要注意的点：</li>
<li><ul>
<li>用尽可能的条件。</li>
</ul>
</li>
<li><ul>
<li>图形化思维（可能人体对这种视觉层次的抽象更敏锐），</li>
</ul>
</li>
<li><ul>
<li>第一个想出来的一般都不够优美。但是或许可以从中吸取观点，不断提炼优化，得到更好的答案。这是一个过程。</li>
</ul>
</li>
<li><ul>
<li>切记“瞎猜”数据，注意发散思维和逻辑思维之间的界定。（费米问题）</li>
</ul>
</li>
<li><ul>
<li>极限思想是发散思维中容易套用的方式。往往可以将它作为启发的源泉，再深入挖掘。</li>
</ul>
</li>
<li><ul>
<li>多跟面试官交流，脑子有时候会跟着嘴巴走。别说的太绝对，显示自己的反思。（不单就面试而言，包括一些场合的交流讨论）</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>3.知识性的东西：</li>
<li><ul>
<li>算法：最近看算法跟最早算法课上的感觉，完全不一样。随着对计算机技术整体的把握越来越细，对算法的理解也变得更深刻了。</li>
</ul>
</li>
<li><ul>
<li>概率论:很多情况下，我们会根据经验来算概率，而不依从概率模型、概率论的理论体系，但人的感性认知是有局限性的。理论体系能支撑更多复杂的情况的分析。</li>
</ul>
</li>
<li><ul>
<li>常识:或许在面对费米问题等时，掌握一些尝试，更有利。</li>
</ul>
</li>
</ul>


<hr />

<p>PS：书中有几个小错误，比如.P208 4题的答案的笔误，以及P210 第5题解题思路中的纰漏。不过，无伤大雅，译者翻译的已经很是舒畅了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于软件工程的一些看法]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/18/some-opinions-about-software-engineering/"/>
    <updated>2013-04-18T18:03:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/18/some-opinions-about-software-engineering</id>
    <content type="html"><![CDATA[<p>标题党了，其实实际的内容是[自己的项目经验总结和反思]。</p>

<p>今天在高级软件工程课上，做了一次关于项目经验的展示。展示的主题围绕自己参与的移动互联网团队开发经验展开。借此机会，我整理了一下思路，于是有了以下的slides。没时间码字，就先把slides直接贴上来啦:)</p>

<!--more-->


<h3>提纲如下：</h3>

<ul>
<li>背景：对传统软件工程方法和移动互联网项目开发的对比</li>
<li>项目总结体会：</li>
<li><ul>
<li>协同目标</li>
</ul>
</li>
<li><ul>
<li>需求的确定</li>
</ul>
</li>
<li><ul>
<li>里程碑</li>
</ul>
</li>
<li><ul>
<li>编码实现</li>
</ul>
</li>
<li><ul>
<li>发布</li>
</ul>
</li>
<li>ReCERD成长模型</li>
<li>推荐书目</li>
</ul>


<p>值得指出的是，所谓的ReCERD小团队项目能力成长模型其实是我根据自身经历所总结的一套方法模型;)， slides中有详细介绍，见笑了，欢迎拍砖。</p>

<p>刚发现speakerdeck是个很好的slides分享平台，试着用一下：</p>

<script async class="speakerdeck-embed" data-slide="1" data-id="a4e4c53097650130957c1e87fe6147c9" data-ratio="1.2994923857868" src="http://biaobiaoqi.github.com//speakerdeck.com/assets/embed.js"></script>


<p>slides下载：</p>

<ul>
<li><p>dropbox 下载地址：<a href="https://www.dropbox.com/s/0b084ccqao8igq8/course-slides.pdf">点击下载</a></p></li>
<li><p>speackerdeck下载地址：<a href="https://speakerdeck.com/biaobiaoqi/thinking-in-software-engineering?slide=1">点击下载</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再见，Seeme]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/07/goodbye-seeme/"/>
    <updated>2013-04-07T23:26:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/07/goodbye-seeme</id>
    <content type="html"><![CDATA[<p>过年算是仪式感最强的节日之一了。不想将过年作为成熟的时间节点，因为生命总是在时间里沉淀。但社会的周期运作确确实实的依着四季来过度，于是总有些决定、变化需要在此执行和接受。真诚的向过去的一切道一声感谢。</p>

<!--more-->


<h2>半年小结</h2>

<p>2012年的7月份下旬，XB学长联系了我。那时候我有半吊子的iOS开发经验。因为对ITP早有耳闻，而自己也对创业一直有着一些念想，在没有对Seeme的团队和产品做深入的了解的情况下，我加入了。这也意味着，实验室那头的内容被暂时搁置。</p>

<p>查好友iOS版本的开发周期很急，临危受命，我和几乎同时加入的没有ios开发经验的乐乐简单的认识后，就开始了编码。有android的版本作为原型，我们依照着“功能-交互-UI”的原则，开始了没日没夜的开发。9月份开学后，我们两从全职转型为兼职，9月下旬，正式在appstore发布了查好友的iOS v1.0。在我看来，那是最刺激的一段时间了，我和LL共同摸索着前进，看着开发进度条一天天向满状态增进，时而掉进坑里，也挣扎着爬起，别无他念，Done is better than perfect.</p>

<p>发版后几天的休息时间，我满怀着对技术实现的热情，琢磨着经验总结和未来的开发规划。遗憾的是，这些想法在之后的时间里并没有被自己重视，也没有很好的向其他人传递。它们从项目初期的疯狂建设中被勾起，又在项目开展的紧锣密鼓和实验室任务的双重压力下被遗忘。</p>

<p><img src="http://g.hiphotos.baidu.com/baike/c%3DbaikeA2%2C10%2C95/sign=b5413922fc039245b5b5b65eeeffc183/30adcbef76094b36da20d402a3cc7cd98c1001e93801bd93.jpg"></p>

<p>忙碌的时间过的很快，从2012年10月开始，到2013年的1月底，我们给查好友iOS版本加入了不少的新功能，比如公共组织通讯录、消息盒子（包括联系人更新、活动提醒和生日提醒）、应用分享、群发短信等，也发布了两个定制版的app到appstore。也是在这忙碌的几个月间，我的思想开始从最初的团队合作的“蜜月期”，渐渐过度到了一个新的阶段。</p>

<p>在这半年时间里，每个阶段，我们都在挑战自我。大家都有太多的优点让我学习。LL的认真负责、XX的敏捷，LY的乐观，RL的积极和对产品的探求，RK从技术角度对产品的感知，XK对设计的见解，更不用说XB学长一肩挑起的团队的运营、详实的数据分析，LP哥思维的缜密、理性，LP和YY学长在会议上思想的碰撞，YY学长对大局观的把控。也是Seemed团队带来的资源，让我有幸见识到LD的风采，思维的发散、活跃以及对产品的把控，见识到CJL大哥在面对实际应用场景时对框架设计的精准。</p>

<p>能够在这个凝聚而内省的团队里成长，我倍感荣幸。</p>

<p>所有的这些经历让我切切实实的了解到一个商业级的产品从设计到运营的不易，以及知识技能的学习和其应用之间微妙的trade-off。</p>

<h2>转折</h2>

<p>每个人的成长过程都充满着无数的选择。是对自我价值实现的追求，让我半年前抓住了机会，加入了Seeme。12月中旬，也是同样的原因，让我开始犹豫。我开始反思自己所做的是不是自己真正所想要的。如果是，那么我会毫不犹豫的走下去；如果不是，那么为什么我会在当前的位置，又如何改变。这两个月，我一直在寻找答案。</p>

<p>主观的看，我渐渐清晰了我的理想：藉由网络对信息分享自由的促进，将人类社会向自由平等推进。听起来有些黑客精神，有些狂妄，不过既然是理想，就不需要太靠谱。另一方面，我希望是做一个对用户负责的开发者，不论用什么开发语言，什么平台。我渴望挑战，虽然现在的技术能力并没有什么优势，但这不是理由，我需要时间。</p>

<p>客观上，首先，虽然我认为技术只是手段，但自己的技术能力并没有达到应用自如的高度。边干边学会将自己抛向了一个充满着更多不确定性的空间，这是现阶段的我所不希望接受的。坦率的说，我更希望在研究生的两年里以一种更有效率、更有针对性的方式学习和提升。</p>

<p>其次，虽然自己做事有一定的主动性，但由于种种原因，一直以来也没在团队中发挥出足够的执行力，来带动大家更高效的调整好自身进步和产品进度之间的平衡。从这个角度而言，我本身也是不适合目前的团队的。</p>

<p>记得刚开始接触团队的时候，我曾经对YY学长说过，“既是对自己负责，也是对团队负责，我无法保证自己在团队的贡献时间”。现在的状况也是如此。我想，我的情况已经不适合Seeme团队的健康成长。既然双方都无法有所助益，理智告诉我，是时候离开了。     </p>

<p>我享受半年来大家的一起奋斗，享受共同构建的产品中一批批用户数据流入的成就感，享受跟优秀的大家合作所激发的自己的斗志。</p>

<p>最后，感谢YY学长，让我接触到了产品从需求到设计、到实现的过程，让我了解到一个IT人对行业所应具有的的触觉和热情，让我学习到要认真的对待每一件事；感谢PG，让我见识到一个冷静理性的思维所能带来的力量；感谢XB学长，让我了解了运营产品过程的复杂，是你将我介绍到团队中，这是一切的引子；感谢XX，我一直在学习你的雷厉风行；感谢LL，你的诚恳和踏实让我自叹不如；感谢XK，见面不多，但合作一直很愉快；感谢RL，你的积极主动也一直感染者我；感谢LY和RK童鞋，合作不多，却很上心。</p>

<p>真心的祝Seeme团队继续壮大，在移动互联网圈子里闯出一片天地。</p>

<p>再见了，半年多的奋斗，承载的梦想和远方。</p>

<p>再见，Seeme。</p>

<hr />

<p>2013/02</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分治、时间空间的权衡:最大合的连续字串问题 (PAT 1007)]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/05/maximum-subsequence-sum/"/>
    <updated>2013-04-05T20:16:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/05/maximum-subsequence-sum</id>
    <content type="html"><![CDATA[<p><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1007">PAT1007</a>：给定一个整数串，找出连续子串中合最大的子串。</p>

<p>《编程珠玑》中用专门的一章对这个问题进行了讲解。（《编程珠玑（第2版）》P73 第8章 算法设计技术）</p>

<p>第一次在PAT上遇到这个题目时，我的思路如下：</p>

<p><del>最简单的淡然是一个三层循环咯，O(n3)，肯定会超时。节省时间的话，用动态规划吧。但简单的动态规划，显然是会超出内存限制的。有没有更巧妙的子问题划分方法呢？</del>先找到子问题：因为要求的串必须连续，分治的时候需要考虑如何延续这个连续性，那么每个子问题中就得考虑找出三个串：1.即左端连续的最大串，2.右端连续的最大串，3.整个串中的最大串.<del>由于每个问题都有三个量要维护，难道我得造出三个表来？卡主:(</del></p>

<!--more-->


<p>《编程珠玑》列出了性能上依次递进的四个算法。这里我结合个人理解和感悟做一些阐释。</p>

<ul>
<li>1.粗暴的brute forse。三层循环嵌套，据说当n 为100000的时候，就需要运行15天时间=.=</li>
</ul>


<p>```
maxsofar = 0
for i = 0 [0, n)</p>

<pre><code>for j = [i, n)
    sum = 0;
    for k = [i, j]
     sum += x[k]
     /*sum is sum of x[i..j]*/
     maxsofar = max(maxsofar, sum)
</code></pre>

<p>```</p>

<ul>
<li>2.针对第一个算法做出了优化。利用零时变量保存状态，避免了过多的重复操作，即所谓的<strong>memoization思想</strong>。时间复杂度下降到O(n*logn)。不过这份代码在PAT的OJ上仍然会超时。</li>
</ul>


<p>```
maxsofar = 0;
for i = [0, n)</p>

<pre><code>sum = 0;
for j = [i, n)
    sum += x[j]
    /* sum is sum of x[i..j]*/
    max sofar = max(maxsofar, sum)
</code></pre>

<p>```</p>

<p>相比之下，动态规划的策略也是有memoization的思想在的，不过，在这里用DP将会创建一张很大的表。。。超出内存限定。</p>

<ul>
<li><p>3.分治算法</p>

<p>  其实之前我自己在思考DP更好的子问题划分时，已经考虑到了这种分治策略。但它的实现，<strong>并非需要DP支持</strong>。</p>

<p>  divide：将串平均分为两段，如下代码第6行。分别处理两个子串，并拼接计算。</p>

<p>  conquer： 计算1.自身包含左端的最大子串；2.包含右端的最大子串；（这两个子串用于与其他子串拼接）；3.自身的最大子串。</p></li>
</ul>


<p>```
float maxsum3(l, u)</p>

<pre><code>if (l &gt; u) /* zero elements*/
    return 0
if (l == u) /* one element*/
    return max (0, x[l]);
m = (1 + u) / 2

/* find max crossing to left */
lmax = sum = 0
for (i = m; i &gt;= 1; i--)
    sum += x[i]
lmax = max(lmax, sum)

/* find max croosing to right */
rmax = sum = 0;
for i = (m, u]
    sum += x[i]
rmax = max(rmax, sum)

return max(lmax+rmax, maxsum3(l, m), maxsum3(m+1, u))   
</code></pre>

<p>```</p>

<ul>
<li><p>4.扫描算法</p>

<p>  类似于<strong>数学归纳法</strong>的思想。从串的最左端开始扫描。对于子串[0, k],其最大子串要么存在于[0, k-1]中而不包含[k]，称其为maxsofar，要么包含[k]，称其maxendingright。</p>

<p>  maxsofar和maxendingright是可能重合的。maxendingright的作用在于对[0,k+1]的子串而言，新的元素[k+1]可以与之结合，从而产生可能的新的子串。</p>

<p>  如果[k+1]本身就是负数呢？不要紧，将[k+1]加入到maxendingright的过程本身就是试错以产生可能的过程。当maxendingright降到0以下时，放弃掉这一子串就好了，因为无论如何扩张，它都是会拖后退的。别忘了，我们还维护着maxsofar，它记录最大的子串。有点绕，但是可以严格的证明算法的正确性。</p>

<p>  伪代码如下：</p></li>
</ul>


<p>```
maxsofa = 0
maxendingright = 0
for i = [0, n)</p>

<pre><code>/* invariant: maxendingright and maxsofar are accurate for x[0..i-1]*/
maxendingright = max(maxendingright + x[i], 0)
maxsofar = max(maxsofar, maxendingright)
</code></pre>

<p>```</p>

<p>根据这个思路，写出<a href="https://github.com/biaobiaoqi/biaobiaoqiCode/blob/master/src/biaobiaoqi/pat/advancedlevel/APAT1007.java">代码</a>，一遍AC:)</p>

<h2>总结：</h2>

<ul>
<li>保存状态，避免重复计算：在算法整体框架没有大的优化的情况下，时间和空间的trade-off或许会有奇效。memoization本身就是一种用空间换时间的思想，而DP中用一种方式实现了这种思想。不过不要被DP算法所禁锢。因为，这个trade-off的实现是很多变的，就像这题的第2种算法。</li>
<li>分治：它的重要性不必多说了。同样的，DP中有分治的思想，但分治本身也是非常灵活的。</li>
<li>数学归纳证明，对算法的设计和正确性佐证很有帮助。话说它也类似于分治的思想呢。</li>
</ul>

]]></content>
  </entry>
  
</feed>
