<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: algorithm | Biaobiaoqi的博客]]></title>
  <link href="http://biaobiaoqi.github.com/tags/algorithm/atom.xml" rel="self"/>
  <link href="http://biaobiaoqi.github.com/"/>
  <updated>2013-05-20T15:04:49+08:00</updated>
  <id>http://biaobiaoqi.github.com/</id>
  <author>
    <name><![CDATA[Biaobiaoqi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[根据前中后序和层序重建二叉树(PAT1020、PAT1043)]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/27/pat1020-pat1043-rebuild-binary-tree/"/>
    <updated>2013-04-27T22:33:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/27/pat1020-pat1043-rebuild-binary-tree</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p><a href="/blog/2013/04/27/travsal-binary-tree/">《二叉树的遍历（递归、非递归）分析》</a>总结了二叉树不同遍历方式的递归和非递归实现，本文则讨论如何针对不同遍历方式的组合重建二叉树。为了简化问题的考虑，假定二叉树中不会出现重复值。列入考虑范围的有前序、中序、后序、层序遍历这四种的组合。前中后序比较常见，而层序则相对特殊一点了。</p>

<p><a href="http://pat.zju.edu.cn/contests/pat-a-practise">PAT</a>的1043和1020题是遍历相关的模板题，正好派上用场。</p>

<!--more-->


<h2>中序+前序</h2>

<h5>算法描述：</h5>

<ul>
<li><p>初始：用前序遍历序列确定根节点，在中序遍历序列中找到该根节点，则左右子树分别为中序中该节点左右的序列。</p></li>
<li><p>迭代：对各个子树分别执行三步操作，1.在前序序列中找子树的根节点；2。在中序序列中找子树的根节点，并划分开根节点的左右子树；3.根据新生成的左右子树，在前序序列中划分开这些节点，从而得到了两颗子树的前序、中序序列。</p></li>
</ul>


<h5>练习：<a href="http://pat.zju.edu.cn/contests/pat-a-practise/1043">PAT1043:Is It a Binary Search Tree</a></h5>

<h5>题意：</h5>

<p>输入一个树的前序遍历序列，判定这个树是否是二叉搜索树或者BST的镜像树，如果是，则用后序序列输出。</p>

<h5>解题思路：</h5>

<ul>
<li><p>1.BST很特殊，实质上BST的所有节点的顺序排列就是中序遍历了。</p></li>
<li><p>2.要检查树是否是BST或者镜像BST，只需按照重建树的思路，在每次重建的过程中做适当检查即可。检查思路是：检查前序遍历序列中，根节点之后的节点排序是否符合BST的二分规则（即前一段都是小于根节点的，后一段都是大于根节点的）。</p></li>
<li><p>3.最后的输出是后序遍历。过程中其实并不用构建整个树，直接在处理过程中，按后序的方式存储节点到队列中即可。</p></li>
</ul>


<p>有了这些考虑，就可以写出代码啦。详细解题代码见链接<a href="https://github.com/biaobiaoqi/biaobiaoqiCode/blob/master/src/biaobiaoqi/pat/advancedlevel/APAT1043.java">PAT1043</a></p>

<h2>中序+后序</h2>

<h5>算法描述：</h5>

<ul>
<li><p>初始：用后序遍历序列确定根节点，在中序遍历序列中找到该根节点，则左右子树分别为中序中该节点左右的序列。</p></li>
<li><p>迭代：对各个子树分别执行三步操作，1.在后序序列中找子树的根节点；2。在中序序列中找子树的根节点，并划分开根节点的左右子树；3.根据新生成的左右子树，在后序序列中划分开这些节点，从而得到了两颗子树的后序、中序序列。</p></li>
</ul>


<h5>练习：<a href="http://pat.zju.edu.cn/contests/pat-a-practise/1020">PAT1020:Tree Traversals</a></h5>

<h5>题意：</h5>

<p>输入为一棵二叉树的后序遍历序列和中序遍历序列。求树的前序遍历序列。</p>

<h5>解题思路：</h5>

<ul>
<li><p>1.有了中序和后序，就能重建树。</p></li>
<li><p>2.最后的输出是前序遍历。过程中其实并不用构建整个树。直接在处理过程中，按前序的方式存储节点到队列中即可。</p></li>
</ul>


<p>详细解题代码见链接<a href="https://github.com/biaobiaoqi/biaobiaoqiCode/blob/master/src/biaobiaoqi/pat/advancedlevel/APAT1020.java">PAT1020</a></p>

<h2>中序+层序</h2>

<h5>算法描述：</h5>

<ul>
<li><p>初始：用层序遍历确定顶节点，在中序遍历中，利用顶节点划分出左右子树。</p></li>
<li><p>迭代：对各个子树分别执行三步操作，1.在层序序列中，找出子树节点集合中，最靠前的节点，这个节点即为子树的顶节点；2.在中序序列中找1中得到的顶节点，并划分开顶节点的左右子树；</p></li>
<li><p>跟（中序+前序）和（中序+后序）不同之处在于没有迭代的第3步，层序是无法直接划分得到左右子树的节点集合的。但这并不妨碍正常的处理。层序是用来找到子树的顶节点的，而顶节点即是所有子树的节点中，在层序遍历中最靠前的节点。</p></li>
</ul>


<h2><del>前序+后序</del></h2>

<p>这个组合是<strong>无法</strong>重建确定的二叉树的。</p>

<p>对于满二叉树，利用子树节点的排列顺序能区分开左右子树节点集合，构建是没有问题的。但一旦有单个叶子的节点存在，则无法确定叶子是左儿子还是右儿子。因为无论是前序还是后序序列，都无法体现单个儿子情况下，儿子的位置。前序会将左右子树的点置于节点之后，后序则是将左右子树的点置于节点之前。</p>

<ul>
<li>举个简单的反例：</li>
</ul>


<blockquote><p>给出如下的前序序列和后序序列：
preorder: A, B;
postorder: B, A</p>

<p>能构建的二叉树有两种可能，1.A是根节点，B是A左儿子； 2.A是根节点， B是A的右儿子。无法得到一个唯一的结果。</p></blockquote>

<h2><del>前序+层序</del></h2>

<p>这个组合也是无法重建确定的二叉树的。同样于后序+层序的情况。</p>

<p>道理跟（前序+后序）的道理一样，无论是前序、后序，还是层序，都是无法确定单个儿子节点情况下儿子节点的顺序。</p>

<h2>总结</h2>

<ul>
<li>中序遍历配合另外任何一个遍历，能重建二叉树。其他的任意两个序列的组合都不能唯一的确定重建的二叉树。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉树的遍历（递归、非递归）分析]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/27/travsal-binary-tree/"/>
    <updated>2013-04-27T21:03:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/27/travsal-binary-tree</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>二叉树是一种很基本的数据结构。很多地方能看到它的身影，比如大名鼎鼎的霍夫曼编码（好了，别问我再比如了，见识浅薄，真不知道更多了。。。）它的结构很简洁、巧妙。</p>

<p>本文讨论二叉树的常见遍历方式的代码实现（这里贴出的是Java），包括前序(preorder)、中序(inorder)、后序(postorder)、层序(level order)，进一步，考虑递归和非递归的实现方式。递归方法的实现相对简单，但递归的执行方式由于每次都会产生一个新的方法调用栈，如果递归层级较深，会消耗较大的内存，转化为非递归则没那么简单了，往往需要实现一个栈来保存状态信息。</p>

<!--more-->


<p>在此之前，先简单定义节点的数据结构：</p>

<p>二叉树节点最多只有两个儿子，并保存一个节点的值，为了实验的方便，假定它为int。同时，我们直接使用Java的System.out.print方法来输出节点值，以显示遍历结果。</p>

<p>```
public class Node {</p>

<pre><code>    public int value;
    public Node leftNode;
    public Node rightNode;

    public Node(int i) {
        value = i;
    }
}
</code></pre>

<p>```
详细代码参见链接:<a href="https://github.com/biaobiaoqi/biaobiaoqiCode/blob/master/src/biaobiaoqi/algorithm/tree/BinarySearchTree.java">BST及其各种便利的详细实现代码</a></p>

<h2>前序遍历</h2>

<ul>
<li>递归实现：递归实现很简单，在每次访问到某个节点时，先输出节点值，然后再依次递归的对左儿子、右儿子调用遍历的方法。代码如下</li>
</ul>


<p>```</p>

<pre><code>public void preOrderTrav(Node n) {
    if (n != null) {
        System.out.print(n.value + " ");
        preOrderTrav(n.leftNode);
        preOrderTrav(n.rightNode);
    }
}
</code></pre>

<p>```</p>

<ul>
<li>非递归调实现：</li>
</ul>


<p>1.第一种实现方式相对容易理解：</p>

<p>初始：维护一个栈，将根节点压入栈中。</p>

<p>循环：每次从栈顶读出一个节点信息，直接将节点值<strong>输出</strong>，同时将儿子节点按从左到右的顺序推到栈顶。</p>

<p>分析：跟递归调用的整体思路一样，不同的是，递归调用时是利用运行时系统所维护的程序调用栈来维护顺序，而这个非递归方法是用过自己维护的栈来保存信息。如此节省了调用栈的空间。</p>

<p>```</p>

<pre><code>public void preOrderTravNoRecur(Node n) {
    Stack&lt;Node&gt; stack = new Stack&lt;Node&gt;();
    stack.add(root);
    while (!stack.empty()) {
        Node t = stack.pop();
        System.out.print(t.value + " ");
        if (t.rightNode != null)
            stack.add(t.rightNode);
        if (t.leftNode != null)
            stack.add(t.leftNode);
    }
}
</code></pre>

<p>```</p>

<p>2.第二种实现方式更普遍（中序遍历的非递归使用了同样的思路）：</p>

<p>初始：维护一个栈S和一个节点变量N。节点变量赋值为根节点。</p>

<p>循环：将节点变量N的左儿子循环的<strong>输出</strong>，并推入栈S中，直到没有左儿子；推出栈S的顶节点，节点变量N赋值为栈S顶节点的右节点。</p>

<p>分析：不同于递归调用的思路。栈S用于实现对某节点的左边支递归值的存储，以便回溯；节点变量N则用于遍历某节点的右边枝（这些节点是从栈S顶读出的节点，依次做处理），由于右边枝是最后才会被访问到的，故在处理右边枝的时候，不需要存储右边枝的信息，依次处理即可。</p>

<p>```</p>

<pre><code>public void preOrderTravNoRecurII(Node n) {
    System.out.println("No Recursive: ");
    Stack&lt;Node&gt; s = new Stack&lt;Node&gt;();
    while (n != null | !s.empty()){
        while (n!=null ){
            System.out.print(n.value + " ");
            s.add(n);
            n = n.leftNode;
        }
        n = s.pop();
        n = n.rightNode;
    }
    System.out.println();
}
</code></pre>

<p>```</p>

<h3>中序遍历</h3>

<ul>
<li>递归实现</li>
</ul>


<p>```</p>

<pre><code>public void inorderTrav(Node n) {
    if (n != null) {
        inorderTrav(n.leftNode);
        System.out.print(n.value + " ");
        inorderTrav(n.rightNode);
    }
}
</code></pre>

<p>```</p>

<ul>
<li>非递归实现</li>
</ul>


<p>初始：维护一个栈S和一个节点变量N。节点变量赋值为根节点。</p>

<p>循环：将节点变量N的左儿子循环的<strong>输出</strong>，并推入栈S中，直到没有左儿子；节点变量N赋值为栈S顶节点的右节点。</p>

<p>分析：跟前序遍历的非递归实现方法二很类似。唯一的不同是输出的时机不同：前序遍历在入栈时输出，而中序遍历在出栈时输出。可以跟深刻的理解到，栈在这里是为了回溯而存在的。</p>

<p>```</p>

<pre><code>public void inorderTravNoRecu(Node n) {
    System.out.println("No Recursive: ");
    Stack&lt;Node&gt; s = new Stack&lt;Node&gt;();
    while (n != null | !s.empty()){
        while (n!=null ){
            s.add(n);
            n = n.leftNode;
        }
        n = s.pop();
        System.out.print(n.value + " ");
        n = n.rightNode;
    }
}
</code></pre>

<p>```</p>

<h3>后序遍历</h3>

<ul>
<li>递归实现</li>
</ul>


<p>```
public void preOrderTravNoRecurII(Node n) {</p>

<pre><code>    System.out.println("No Recursive: ");
    Stack&lt;Node&gt; s = new Stack&lt;Node&gt;();
    while (n != null | !s.empty()){
        while (n!=null ){
            System.out.print(n.value + " ");
            s.add(n);
            n = n.leftNode;
        }
        n = s.pop();

        n = n.rightNode;
    }
    System.out.println();
}
</code></pre>

<p>```</p>

<ul>
<li>非递归实现</li>
</ul>


<p>初始：1.维护一个栈S、一个节点变量N和一个标记数组。节点变量赋值为根节点，栈暂时存储便利到的节点，标记数组用于标记栈中的节点是否已经访问过右边节点。2.将根节点的所有左儿子压入栈中。</p>

<p>循环：依次处理栈中节点。如果节点有右儿子，且没有被处理过（通过标记数组判定），则将右子树的根节点及其左儿子全部压入栈中；如果已经处理过或者没有右儿子，则输出并出栈。</p>

<p>分析：与前序和中序的一个大的不同在于需要用标记数组标记节点的右子树是否已经访问过。对每个节点进行处理的时候，都保证已经处理完了左右子树（通过先压入左边儿子为主线，处理栈中的每个节点时，再压入右边儿子来实现）。</p>

<p>```
public void postOrderTravNoRecu(Node n) {</p>

<pre><code>    Stack&lt;Node&gt; stack = new Stack&lt;Node&gt;();
    int[] flag = new int[max];

    while (n != null) {
        stack.push(n);
        flag[stack.size()] = 0;
        n = n.leftNode;
    }

    while (!stack.empty()) {
        n = stack.peek();
        while(n.rightNode != null &amp;&amp; flag[stack.size()] == 0) {
            n = n.rightNode;
            flag[stack.size()] = 1;
            while (n != null) {
                stack.push(n);
                flag[stack.size()] = 0;
                n = n.leftNode;
            }
            n = stack.peek();//TODO be careful about this
        }
        n = stack.pop();
        System.out.print(n.value + " ");
    }

}
</code></pre>

<p>```</p>

<h3>层序遍历</h3>

<ul>
<li>无法使用递归方法</li>
</ul>


<p>层序遍历不同于其他的遍历。可以通过反证法证明：</p>

<p>如果能实现对A节点的层序递归，在对A节点处理的过程中，应该递归的对两个儿子B和C分别调用了层序遍历。在这种情况下，我们无法让B和C的同一个层级的儿子在集中的时间中被遍历到，换言之，B的第一层儿子在对B的调用中被遍历，而C的第一层儿子，则在对C的调用中遍历，这是分离开的。不成立，得证。</p>

<ul>
<li>非递归方法：</li>
</ul>


<p>分析：此方法类似于前序遍历的非递归方法的第一种。用一个栈维护信息。</p>

<p>```</p>

<pre><code>public void levelOrderTrav(Node n) {
    System.out.print("Level OrderTrav: ");

    Queue&lt;Node&gt; q = new LinkedList&lt;Node&gt;();
    q.add(n);
    while (q.size() != 0) {
        n = q.poll();
        System.out.print(" " + n.value);
        if (n.leftNode != null) 
            q.add(n.leftNode);
        if (n.rightNode != null)
            q.add(n.rightNode);

    }
}
</code></pre>

<p>```</p>

<h2>总结</h2>

<p>非递归实现的代码相对来说没有递归实现的直观。其核心都是维护了一个栈来保存状态，避免了产生过多方法调用栈浪费内存空间。</p>

<p>本文中针对二叉树的几种遍历方式，描述了递归和非递归的解决方案。普遍意义的递归转非递归的方法和思想，将在另外一篇博文中介绍;)。欢迎交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《谁是谷歌想要的人才？》]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/20/are-you-smart-enough-to-work-at-google/"/>
    <updated>2013-04-20T00:47:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/20/are-you-smart-enough-to-work-at-google</id>
    <content type="html"><![CDATA[<p><em>道理都明白，还得靠自己</em></p>

<h3>关于本书</h3>

<p>藉由大多数程序员天然的对google怀有的朝圣般的向往和喜爱，开始看<a href="http://book.douban.com/subject/21329264/">这本书</a>。</p>

<p><img class="left" src="http://img.cnbeta.com/upimg/121231/raymon725_1451506190985.jpg" width="250" height="400" title="Place Kitten #2" ></p>

<p>书中的中文版序的标题就是“跳出框框来思考”，这种观点倒不是第一次见到了，甚至可以说，这些观点充斥于互联网上的各种流传、经验贴中。但这并不意味着我们不需要再花时间在这种书上。道理都懂，就是做不好已经成为这个信息通畅的时代的特征之一。正所谓“纸上得来终觉浅，绝知此事要躬行”。</p>

<!--more-->


<p>而如果有一个“躬行”过的人再将他的感受娓娓道来，辅以自己的用心体会，或许会事半功倍呢。这就是我想通过这本书得到的。如下几点，让这个想法成为可能：</p>

<ul>
<li>1.这本书并不单单是一个题集，大约有一般的篇目是在讲述题记，另外一半的篇目，则是代入感颇强的为什么要这么思考的叙述。后者看似无关功利，但却可以给人足够的心理暗示和支撑，以提升良好思考习惯在内心的重要性。</li>
<li>2.作者庞德斯通写过不少充满思维的力量书。</li>
</ul>


<p>认同归认同，关键的还是自己的所得。下面是我的一些思考。</p>

<h3>我的思考</h3>

<ul>
<li>1.解决问题的思路：问题域 --> 结果</li>
<li><ul>
<li>问题域：需要慎重思考，充分利用资源，限定问题域的边界。往往很多题目是在没有弄清楚题意的情况下开始解答而得不到好的答案。</li>
</ul>
</li>
<li><ul>
<li>问题域向结果推演：首先是发散式的头脑风暴（发现尽可能多的维度的才想），然后再依次的理性分析，找本质规律，内在联系，向结果靠拢。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>2.分析过程中，有些需要注意的点：</li>
<li><ul>
<li>用尽可能的条件。</li>
</ul>
</li>
<li><ul>
<li>图形化思维（可能人体对这种视觉层次的抽象更敏锐），</li>
</ul>
</li>
<li><ul>
<li>第一个想出来的一般都不够优美。但是或许可以从中吸取观点，不断提炼优化，得到更好的答案。这是一个过程。</li>
</ul>
</li>
<li><ul>
<li>切记“瞎猜”数据，注意发散思维和逻辑思维之间的界定。（费米问题）</li>
</ul>
</li>
<li><ul>
<li>极限思想是发散思维中容易套用的方式。往往可以将它作为启发的源泉，再深入挖掘。</li>
</ul>
</li>
<li><ul>
<li>多跟面试官交流，脑子有时候会跟着嘴巴走。别说的太绝对，显示自己的反思。（不单就面试而言，包括一些场合的交流讨论）</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>3.知识性的东西：</li>
<li><ul>
<li>算法：最近看算法跟最早算法课上的感觉，完全不一样。随着对计算机技术整体的把握越来越细，对算法的理解也变得更深刻了。</li>
</ul>
</li>
<li><ul>
<li>概率论:很多情况下，我们会根据经验来算概率，而不依从概率模型、概率论的理论体系，但人的感性认知是有局限性的。理论体系能支撑更多复杂的情况的分析。</li>
</ul>
</li>
<li><ul>
<li>常识:或许在面对费米问题等时，掌握一些尝试，更有利。</li>
</ul>
</li>
</ul>


<hr />

<p>PS：书中有几个小错误，比如.P208 4题的答案的笔误，以及P210 第5题解题思路中的纰漏。不过，无伤大雅，译者翻译的已经很是舒畅了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分治、时间空间的权衡:最大合的连续字串问题 (PAT 1007)]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/05/maximum-subsequence-sum/"/>
    <updated>2013-04-05T20:16:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/05/maximum-subsequence-sum</id>
    <content type="html"><![CDATA[<p><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1007">PAT1007</a>：给定一个整数串，找出连续子串中合最大的子串。</p>

<p>《编程珠玑》中用专门的一章对这个问题进行了讲解。（《编程珠玑（第2版）》P73 第8章 算法设计技术）</p>

<p>第一次在PAT上遇到这个题目时，我的思路如下：</p>

<p><del>最简单的淡然是一个三层循环咯，O(n3)，肯定会超时。节省时间的话，用动态规划吧。但简单的动态规划，显然是会超出内存限制的。有没有更巧妙的子问题划分方法呢？</del>先找到子问题：因为要求的串必须连续，分治的时候需要考虑如何延续这个连续性，那么每个子问题中就得考虑找出三个串：1.即左端连续的最大串，2.右端连续的最大串，3.整个串中的最大串.<del>由于每个问题都有三个量要维护，难道我得造出三个表来？卡主:(</del></p>

<!--more-->


<p>《编程珠玑》列出了性能上依次递进的四个算法。这里我结合个人理解和感悟做一些阐释。</p>

<ul>
<li>1.粗暴的brute forse。三层循环嵌套，据说当n 为100000的时候，就需要运行15天时间=.=</li>
</ul>


<p>```
maxsofar = 0
for i = 0 [0, n)</p>

<pre><code>for j = [i, n)
    sum = 0;
    for k = [i, j]
     sum += x[k]
     /*sum is sum of x[i..j]*/
     maxsofar = max(maxsofar, sum)
</code></pre>

<p>```</p>

<ul>
<li>2.针对第一个算法做出了优化。利用零时变量保存状态，避免了过多的重复操作，即所谓的<strong>memoization思想</strong>。时间复杂度下降到O(n*logn)。不过这份代码在PAT的OJ上仍然会超时。</li>
</ul>


<p>```
maxsofar = 0;
for i = [0, n)</p>

<pre><code>sum = 0;
for j = [i, n)
    sum += x[j]
    /* sum is sum of x[i..j]*/
    max sofar = max(maxsofar, sum)
</code></pre>

<p>```</p>

<p>相比之下，动态规划的策略也是有memoization的思想在的，不过，在这里用DP将会创建一张很大的表。。。超出内存限定。</p>

<ul>
<li><p>3.分治算法</p>

<p>  其实之前我自己在思考DP更好的子问题划分时，已经考虑到了这种分治策略。但它的实现，<strong>并非需要DP支持</strong>。</p>

<p>  divide：将串平均分为两段，如下代码第6行。分别处理两个子串，并拼接计算。</p>

<p>  conquer： 计算1.自身包含左端的最大子串；2.包含右端的最大子串；（这两个子串用于与其他子串拼接）；3.自身的最大子串。</p></li>
</ul>


<p>```
float maxsum3(l, u)</p>

<pre><code>if (l &gt; u) /* zero elements*/
    return 0
if (l == u) /* one element*/
    return max (0, x[l]);
m = (1 + u) / 2

/* find max crossing to left */
lmax = sum = 0
for (i = m; i &gt;= 1; i--)
    sum += x[i]
lmax = max(lmax, sum)

/* find max croosing to right */
rmax = sum = 0;
for i = (m, u]
    sum += x[i]
rmax = max(rmax, sum)

return max(lmax+rmax, maxsum3(l, m), maxsum3(m+1, u))   
</code></pre>

<p>```</p>

<ul>
<li><p>4.扫描算法</p>

<p>  类似于<strong>数学归纳法</strong>的思想。从串的最左端开始扫描。对于子串[0, k],其最大子串要么存在于[0, k-1]中而不包含[k]，称其为maxsofar，要么包含[k]，称其maxendingright。</p>

<p>  maxsofar和maxendingright是可能重合的。maxendingright的作用在于对[0,k+1]的子串而言，新的元素[k+1]可以与之结合，从而产生可能的新的子串。</p>

<p>  如果[k+1]本身就是负数呢？不要紧，将[k+1]加入到maxendingright的过程本身就是试错以产生可能的过程。当maxendingright降到0以下时，放弃掉这一子串就好了，因为无论如何扩张，它都是会拖后退的。别忘了，我们还维护着maxsofar，它记录最大的子串。有点绕，但是可以严格的证明算法的正确性。</p>

<p>  伪代码如下：</p></li>
</ul>


<p>```
maxsofa = 0
maxendingright = 0
for i = [0, n)</p>

<pre><code>/* invariant: maxendingright and maxsofar are accurate for x[0..i-1]*/
maxendingright = max(maxendingright + x[i], 0)
maxsofar = max(maxsofar, maxendingright)
</code></pre>

<p>```</p>

<p>根据这个思路，写出<a href="https://github.com/biaobiaoqi/biaobiaoqiCode/blob/master/src/biaobiaoqi/pat/advancedlevel/APAT1007.java">代码</a>，一遍AC:)</p>

<h2>总结：</h2>

<ul>
<li>保存状态，避免重复计算：在算法整体框架没有大的优化的情况下，时间和空间的trade-off或许会有奇效。memoization本身就是一种用空间换时间的思想，而DP中用一种方式实现了这种思想。不过不要被DP算法所禁锢。因为，这个trade-off的实现是很多变的，就像这题的第2种算法。</li>
<li>分治：它的重要性不必多说了。同样的，DP中有分治的思想，但分治本身也是非常灵活的。</li>
<li>数学归纳证明，对算法的设计和正确性佐证很有帮助。话说它也类似于分治的思想呢。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PAT Advanced Level (1) easy problems]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/04/pat-advanced-level-1-easy-problems/"/>
    <updated>2013-04-04T20:58:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/04/pat-advanced-level-1-easy-problems</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://visualcaffeine.com/ws/wp-content/uploads/2012/04/computer_guy.jpg" title="Place Kitten #2" ></p>

<p>今天做的这批题目，总的来说几乎不需要数据结构基础。几个小时刷完。</p>

<blockquote><ul>
<li>1001: 数字的格式转换。第一次做的时候，将正负数分两种情况处理了，其实负数可以拆成正数加上一个负号。太简单的道理，竟然没注意。另外，Java完全可以使用NumberFormat实现格式转换。好简单的说。</li>
</ul>
</blockquote>

<!-- more -->


<blockquote><ul>
<li><p>1002：一元多项式求导问题。有三点需要注意：1.输出中的小数精确的位数；2.浮点数操作过程中需要使用到eps做判定；<em>3.在我的实现中，主循环逻辑中，将判定游标越界的逻辑统一的提出到最外层，让代码更加简洁，利于维护。</em></p></li>
<li><p>1005: 简单的hash。注意Java可以直接实现int转string，string转int。</p></li>
<li><p>1006: 简单的找最大最小。用到了Java中String的split方法划分子串和Integer.parseInt()转String为int。</p></li>
<li><p>1008: 纯水题。</p></li>
<li><p>1009: 一元多项式相乘。基于桶排序的思想，将子项相乘的结果加到数组中去实现。第一次提交时，算错了“桶”的大小。。</p></li>
<li><p>1011: 水题，求组最大值的问题。</p></li>
<li><p>1027: 水题，hash求解。</p></li>
</ul>
</blockquote>

<h2>资料</h2>

<p><a href="http://pat.zju.edu.cn/contests/pat-a-practise">题目列表</a></p>

<p><a href="https://github.com/biaobiaoqi/biaobiaoqiCode/tree/master/src/biaobiaoqi/pat/advancedlevel">我的代码</a></p>

<h2>PS</h2>

<p>除了这几道题，其他的题目似乎都需要树、图、DP的思想。明天开干！</p>

<p>用了那么久eclipse，其实对eclipse的掌握并不好。比如他对（）和“”等的支持方式：</p>

<blockquote><p><strong>只需要输入左单边括号，即可获得一个完整的括号，并定位到括号内输入内容。完成内容输入后，回车即可跳到反括号外，继续输入。同理于调用方法时参数的输入等。</strong></p></blockquote>
]]></content>
  </entry>
  
</feed>
