<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: think | Biaobiaoqi的博客]]></title>
  <link href="http://biaobiaoqi.github.com/tags/think/atom.xml" rel="self"/>
  <link href="http://biaobiaoqi.github.com/"/>
  <updated>2013-05-18T21:40:57+08:00</updated>
  <id>http://biaobiaoqi.github.com/</id>
  <author>
    <name><![CDATA[Biaobiaoqi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《免费》]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/05/13/free-the-bit-economics/"/>
    <updated>2013-05-13T00:46:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/05/13/free-the-bit-economics</id>
    <content type="html"><![CDATA[<h2>比特经济的到来</h2>

<p><a href="http://en.wikipedia.org/wiki/Chris_Andersen">克里斯·安德森</a>人称鸟人安德森，现效力于热火队，一直以来都是值得信赖的角色球员，板凳匪徒，内线尖兵。好了，不扯了……回到另外一个<a href="http://t.cn/akRhip">克里斯·安德森</a>的思想世界来。</p>

<p>长尾理论早就为人熟知了，最早就是由安德森提出的，用于解释Amazon和Netflix的商业和经济模式。虽然没有阅读过原书，只是从网络接收了一些二手甚至三手的相关观点，但也可以从当今互联网的新兴中发现许多端倪。</p>

<p>按作者的话来说，“免费”是<a href="http://book.douban.com/subject/1919072/">《长尾理论》</a>没讨论完的话题，它并非新生事物，但是一直在变化，它的变化促使我们要反思人类行为和经济动因方面最根深蒂固的一些观念。</p>

<!--more-->


<p>作为没有系统学习经济理论的工科生，未必深刻的理解了作者观点的精华部分，但至少从作者娓娓道来的文字中获得了商业模式和经济原理的联系的启迪。这是从微博140个文字的刷屏中难以获取的。</p>

<p>当然，这种了解层面显然是无法发挥<a href="http://book.douban.com/subject/3932520/">《免费》</a>的效力的。正文安德森所言，那些懂得“免费”将会统摄明日市场并摧毁今日市场的人其实已经走在前面了，而《免费》所能带来的思考能点亮的新的商业模式，还得沉淀到对生活、市场的思考中去。</p>

<p>下面是个人阅读的一些收获，简略匆草，欢迎拍砖讨论。</p>

<h2>原子经济和比特经济</h2>

<p>20世纪的经济主要是一种原子经济的时代，是基于物质的。而21世纪的经济则是一种比特经济，核心是信息。原子经济的基调是通货膨胀，而比特经济的主旋律是通货紧缩。</p>

<p>在原子经济中，想要得到任何免费都需要换一种方式把钱付了，而比特经济中，真正的免费是存在的。
“免费经济学”的兴起正是由数字时代的科技进步来推动的。是比特经济的一大特征。</p>

<p>而这个发展趋势的原因，在于互联网的基础设施价格不断下降，处理器、网络带宽和存储器是造成科技界价格下行的三驾马车。互联网的边际成本很低。</p>

<p>摩尔定律何以持续？每当某种生产流程出现了改进产业效率能力下滑的局面，就会更快的产生提出某种全新的、更好观念的动力。正是很多段的单一学习曲线共同组成了按趋势下降的摩尔定律。我们称这样的曲线为<em>复合学习曲线</em>。</p>

<p>在互联网领域，信息越发重要。最早认识到比特经济的影响的是黑客们：</p>

<blockquote><p>一方面，信息想要变得昂贵，因为它很宝贵，在恰当的地点得知恰当的信息，能够改变你的人生。而在另一方面，信息也要变得免费，因为发布信息的成本一直在下降。因此，这两种趋势在互相牵制。</p></blockquote>

<p>这一观点，在科技和思想之间建立起了经济纽带。</p>

<h2>充裕和稀缺：</h2>

<p>人类似乎与生俱来对资源贫瘠要比对资源充裕的理解更加深刻。正如我们在进化过程中形成了对威胁过度反应的本能一样，我们的一个生存技能就是关注资源耗竭会带来的威胁。</p>

<p>人们习惯于匮乏管理，大多数环境下，资源都是匮乏的。而在充裕管理时，显得手足无措。</p>

<p>基于供需定价关系，一旦物品稀缺了，那么价格就会上涨。实际上，一种资源变得稀缺而且昂贵了，那么就会促使人类去寻找另一种更充裕的资源，而目前对稀缺资源的需求也会逐渐向别种资源转移。如此一来，之前稀缺的资源的价格也不会大幅提升。</p>

<p>供需关系决定在任何时间节点上的商品价格。从长期的角度来看，价格趋势是由技术本身决定的，某种商品数量越多，那么价格就会越便宜。</p>

<p>浪费一般是个贬义词，但正是对充裕资源的浪费，催生了创新。自然界就是通过浪费生命来实现生命的进化。</p>

<h2>免费</h2>

<p>免费归根结底都表现为同一实质——让钱在不同的产品之间、人之间、现在和未来之间、不与钱打交道的市场和金钱市场之间转义。经济学家称其为交叉补贴。交叉补贴体现了“天下没有免费的午餐”这句话的实质。</p>

<p>交叉补贴的世界里，免费可以分为四大类：</p>

<h6>1.直接交叉补贴</h6>

<ul>
<li>什么免费：吸引你掏腰包买其他商品的东西免费</li>
<li>谁享受免费：以某种方式最终掏腰包的人</li>
<li>举例：超市打折某些商品，吸引你到超市购，从而卖出其他商品</li>
</ul>


<h6>2.三方市场</h6>

<ul>
<li>什么免费：内容、服务、软件等</li>
<li>谁享受免费：任何人</li>
<li>举例：电视、广播、报刊等媒体</li>
</ul>


<h6>3.免费加收费模式（Freemium）</h6>

<ul>
<li>什么免费：和付费版本想匹配的任何商品</li>
<li>谁享受免费：基本用户</li>
<li>举例：软件分为免费版和收费版</li>
</ul>


<h6>4.非货币市场(非货币市场的不同表现形式：礼品经济、劳动交换、盗版)</h6>

<ul>
<li>什么免费：人们选择免费赠送的、没有寄希望别人付钱的东西</li>
<li>谁享受免费：任何人</li>
<li>举例：写博客供其他人阅读</li>
</ul>


<p>盗版或仿制行为刺激的市场需求要比它满足的需求更多。</p>

<p>在非货币市场中，礼品经济比市场资本主义离人性化走的更近一点。一直以来，经济学家做过很多尝试，但由于顿巴数（Dunbar number）的作用，超过150这个规模的群体就难以维系。而互联网的到来，给礼品经济带来了新的机会，可能打破顿巴数的局限，让建立在互利基础之上的经济有效运转。</p>

<h3>免费的特性</h3>

<ul>
<li><p>免费给所有市场带来了更强的流动性，让市场能够运转的更为顺畅。它将上亿美元的产业转变为百万美元的产业，但通常情况下，财富似乎并未蒸发，相反，它只是以难以衡量的方式被重新分布配。它让用户更便捷的交流，降低了开销。</p></li>
<li><p>免费具有破坏性，却常常能导致更高效市场的出现。比如wiki摧毁了《大英百科全书》的市场，而自身并不怎么赚钱。当然，他提高了人们的获取知识的效率。</p></li>
<li><p>免费的坏处：去货币化的长期积极效应显现之前可能出现短期消极后果。在改变的多方关系中，可能存在脆弱的节点。</p></li>
</ul>


<h2>比特经济下的典型市场</h2>

<p>传统媒体上发布的广告全都是销售稀缺资源——空间。而互联网最不缺的就是空间，因此很多互联网广告效果甚至不如平面媒体。但Google通过广告的精准匹配，将它转化为稀缺资源。</p>

<p>视频游戏领域对免费的实践很多。</p>

<p>低于边际成本的数字书籍，实际上是为高边际成本演说或深入探讨而开展的市场营销。</p>

<p>在一个竞争性市场中，价格等于边际成本。垄断、专利权、版权和商标权等都能拒竞争对手于千里之外。于是形成了递增收益。而互联网编辑成本很低，很倾向于竞争性市场。</p>

<p>“搭便车问题”：wiki毫无利润可言，每个人都会搭便车。但实际上，在大规模的用户下，只要有人参与其中，大部分志愿者社区就能发展和完善。因为大量消极顾客本身正是对少数做出贡献的汇报——他们被成为观众。</p>

<h2>Google</h2>

<p>在比特经济的主战场的IT领域，免费方式已经获得了很大的成功。经典的案例包括微软操作系统和inux之争，以及google推出免费邮箱冲击雅虎。</p>

<p>Google通过为一小部分核心产品做广告而赚取大部分利润。互联网创业成本低、边际成本低，造就了Google的成长和规模化。它拥有很大的数据中心，这种对数据处理、存储和存储的融合，产生了规模经济。</p>

<p>互联网具备极强的网络效应。由于用户之间交流沟通方便，容易导致”羊群效应“。在传统行业，排名前三的竞争对手，他们的市场份额一般是60% 30% 5%，而在网络效应突出的市场中则为：95%，5%，0%。现在的Google已经站在了第一的位置。</p>

<p>唯一能限制google增长势头之处在于互联网自身的扩展步伐。因此Google设计出众多的产品，以扩展包括免费无线接入和免费存储在内的互联网应用。这是经济学家所说的”互补品“。 当然，前不久Google关闭了GoogleReader的事实证明，一切都是定量的trade-off，或许greader在Google的战略中已经变成了投入产出比过低的产品了吧。</p>

<h2>非货币市场</h2>

<p>非货币市场：注意力经济 和 声誉经济。</p>

<p>在互联网上，流量就是注意力，而链接就是声誉。</p>

<p>Google的商业模式就是将声誉经济转化为注意力经济进而转化为货币的很好例证。Google控制着整个经济体系，并不断改善搜索排名算法，以防止经济体系中的通货膨胀，保持货币的价值。Facebook运营“朋友”，Twitter运营“追随者”，用户均可创建声誉资本，并将其转化为注意力。</p>

<p>付出一定代价才能换来充裕，而代价就是别处的匮乏。</p>

<p>当所有物质需求都得到满足时，最值钱的商品就变成了社会资本。</p>

<p>我们始终被自己不曾拥有的而非已拥有的事物激励着。</p>

<p>从经济学角度看，充裕是创新和增长的推进器。但从心理学角度看，匮乏才是我们真正理解的一切。</p>

<p>时尚经济学：“诱导性过时”，将一种专有设计方案转化成一大众商品广泛复制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的MBTI职业性格测试]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/05/12/mbti-test/"/>
    <updated>2013-05-12T01:04:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/05/12/mbti-test</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>最近在看<a href="http://book.douban.com/subject/5372651/">《程序员的思维训练——开发人之前能的九堂课》</a>，其中讲到了<a href="http://wiki.mbalib.com/wiki/MBTI%E4%BA%BA%E6%A0%BC%E7%90%86%E8%AE%BA">MBTI职业性格测试</a>的指导意义。记起来两年多以前在面试ASES的时候有做过这个测试，只可惜当时的测试结果在好几次的更换电脑的过程中不知踪影了。最近自己的思考也集中在认知领域，于是重新找到那个链接，做了一次测试。<a href="http://www.apesk.com/mbti/">点击链接测试</a>，正文是我的测试结果。</p>

<p>我也使用了另一个在线MBTI来检验测试结果，相差不大。一个是ENTJ（本文的测试结果），一个是ENFJ（E:8,I:2,S:8,N:12,T:10,F:10,J:11,P:9），差别不大。</p>

<p>总的来说，这是一个带有个人倾向性的测试结果，至于结果对不对，这都不重要。能在对测试结果的分析中，反省自身，那就够了。</p>

<!--more-->


<blockquote><p>知己知彼，百战不殆</p></blockquote>

<h2>ENTJ 统帅型——一切尽在掌握</h2>

<h3>一、你的MBTI图形</h3>

<p><img src="http://dl.dropboxusercontent.com/u/64021093/Pics/D567480F-DB00-481E-9AEF-08EBFC61E0B1.png" title="Title" alt="alt text" /></p>

<ul>
<li> 倾向示意图表示四个维度分别的倾向程度。从中间往两侧看，绿色指示条对应下面坐标的哪个区间。</li>
</ul>


<h3>二、基本描述</h3>

<p>才储分析：您的性格类型倾向为“ ENTJ ”(外向 直觉 思维 判断 倾向度： E75 N80 T52 J80  不假思索指数：15)</p>

<p>坦诚、果断，有天生的领导能力。能很快看到公司/组织程序和政策中的不合理性和低效能性，发展并实施有效和全面的系统来解决问题。善于做长期的计划和目标的设定。通常见多识广，博览群书，喜欢拓广自己的知识面 并将此分享给他人。在陈述自己的想法时非常强而有力。</p>

<p>ENTJ型的人是伟大的领导者和决策人。他们能轻易地看出事物具有的可能性，很高兴指导别人，使他们的想象成为现实。他们是头脑灵活的思想家和伟大的长远规划者。因为ENTJ型的人很有条理和分析能力，所以他们通常 对要求推理和才智的任何事情都很擅长。为了在完成工作中称职，他们通常会很自然地看出所处情况中可能存在的缺陷，并且立刻知道如何改进。他们力求精通整个体系，而不是简单地把它们做为现存的接受而已。 ENTJ型 的人乐于完成一些需要解决的复杂问题，他们大胆地力求掌握使他们感兴趣的任何事情。 ENTJ型的人把事实看得高于一切，只有通过逻辑的推理才会确信。 ENTJ型的人渴望不断增加自己的知识基础，他们系统地计划和研 究新情况。他们乐于钻研复杂的理论性问题，力求精通任何他们认为有趣的事物。他们对于行为的未来结果更感兴趣，而不是事物现存的状况。 ENTJ型的人是热心而真诚的天生的领导者，他们往往能够控制他们所处的任何 环境。因为他们具有预见能力，并且向别人传播他们的观点，所以他们是出色的群众组织者。他们往往按照一套相当严格的规律生活，并且希望别人也是如此。因此他们往往具有挑战性，同样艰难地推动自我和他人前进。</p>

<p>您适合的领域有：工商业、政界、金融和投资领域、管理咨询、培训、专业性领域</p>

<p>您适合的职业有：</p>

<ul>
<li>各类企业的高级主管</li>
<li>总经理</li>
<li>企业主</li>
<li>社会团体负责人</li>
<li>政治家</li>
<li>投资银行家</li>
<li>风险投资家</li>
<li>股票经纪人</li>
<li>公司财务经理</li>
<li>财务顾问</li>
<li>经济学家</li>
<li>企业管理顾问</li>
<li>企业战略顾问</li>
<li>项目顾问</li>
<li>专项培训师</li>
<li>律师</li>
<li>法官</li>
<li>知识产权专家</li>
<li>大学教师</li>
<li>科技专家</li>
<li>房产开发商</li>
<li>教育咨询顾问</li>
<li>投资顾问</li>
<li>（人事、销售、营销）经理</li>
<li>技术培训人员</li>
<li>（后勤、电脑信息服务和组织重建）顾问</li>
<li>国际销售经理</li>
<li>特许经营业主</li>
<li>程序设计员</li>
<li>环保工程师</li>
</ul>


<h3>三、气质类型</h3>

<p>根据大卫.凯尔西（David Keirsey）气质与性情理论，你属于“概念主义者”，下面是对“概念主义者”的描述：</p>

<p>“概念主义者”型的人自信、有智慧、富有想像力。他们的原则是“所有的事情都要做到最好”。</p>

<p>“概念主义者”是最独立的一种人。他们工作原则性强，标准高，对自己和对别人的要求都很严格。他们不会被别人的冷 遇和批评干扰，喜欢以自己的方式做事。</p>

<p>“概念主义者”型的人天生好奇，无论是由于工作本身的需要还是出于长远的考虑，他们很喜欢不断地吸取知识，他们因此而常常看 得到同一问题的多个不同的方面，习惯于全面地、概括地思考问题，和一分为二地看待问题。他们很善于发现事物的可能性，理解事 物的复杂性，喜欢进行逻辑的分析，从而对真实或假设的问题构思出解决方案。</p>

<p>“概念主义者”喜欢能够提供自由、变化和需要有较高的智力才能完成的工作，不喜欢简单、重复的工作。他们喜欢看到自己的想法 能够得到实施。“概念主义者”会对那些他们认为不够能干的人不耐烦，喜欢与很有能力的上司、下属、同事共事。许多“概念主义 者”型的人推崇权力，易于被有权力的人和权力地位所吸引。</p>

<h6>总体描述</h6>

<ol>
<li>善于分析、总结、判断</li>
<li>善于从整体上把握事物</li>
<li>喜欢追根究底，力图抓住事物的本质</li>
<li>对文字、语言敏感</li>
<li>抽象思维能力强，能理解复杂的理论概念，善于将事情概念化，善于从中推断出原则或预测趋势</li>
<li>擅长策略性思维</li>
<li>会接受建设性的批评，而不把它当作针对个人的问题</li>
</ol>


<h6>潜在的弱点</h6>

<ol>
<li>由于有时给自己定了不切实际的高标准，可能对自己和他人的期望过高</li>
<li>易于像紧逼自己工作一样去逼着别人工作</li>
<li>常常不希望别人对抗自己的意愿，有时给人顽固、死板的印象</li>
<li>易于过份强调工作，从而损害了家庭的和谐</li>
<li>常常不记得花时间夸奖同事、下属或其他人</li>
<li>常常忽视了一些工作中所需要的社交礼仪</li>
<li>有时没有注意到他人的情绪感受，从而给人冷漠、不近人情的印象</li>
<li>有时会因忽略了细节而没有注意到周围环境的变化</li>
<li>易于过于理论化而不考虑实际情况，易受远景规划诱惑，难以具体落实</li>
<li>有时想法太多，不知道哪些切实可行，不知道真正应该做什么</li>
</ol>


<h3>四、优势与劣势</h3>

<p>ENTJ的特质： 统帅型——一切尽在掌握</p>

<h5>优势：</h5>

<p>你直率、果断，能够妥善解决组织的问题，是天生的领导者和组织的创建者。你擅长发现一切事物的可能性并很愿意指导他人实现梦想，是思想家和长远规划者。</p>

<p>你逻辑性强，善于分析，能很快地在头脑里形成概念和理论，并能把可能性变成计划。树立自己的标准并一定要将这些标准强加于他人。你看重智力和能力，讨厌低效率，如果形势需要，可以非常强硬。你习惯用批判的眼光看待事物，随时可以发现不合逻辑和效率低的程序并强烈渴望修正它们。</p>

<p>你善于系统、全局地分析和解决各种错综复杂的问题，为了达到目的，你会采取积极行动，你喜欢研究复杂的理论问题，通过分析事情的各种可能性，事先考虑周到，预见问题，制定全盘计划和制度并安排好人和物的来源，推动变革和创新。</p>

<p>愿意接受挑战，并希望其他人能够象自己一样投入，对常规活动不感兴趣。长于需要论据和机智的谈吐的事情，如公开演讲之类。</p>

<h5>劣势：</h5>

<p>你经常在没有了解细节和形势之前就草率地做决定。</p>

<p>你总是很客观、带有批判性地对待生活，容易对别人的情况和需要表现得较粗心、直率、无耐心。建议你注意倾听周围人的心声，并对别人的贡献表示赞赏。你需要学会在实施自己的计划之前听取别人的建议，以免独断专横。</p>

<p>你考虑问题非常理智，很少受无关因素影响。你没有时间和兴趣去体会情感，容易忽略他人的感受，显得不尽人情。但当你的感情被忽视或没有表达出来的时候，你会非常敏感。你们需要给自己一点儿时间来了解自己的真实感情，学会正确地释放自己的情感，而不是爆发，并获得自己期望和为之努力的地位。
你容易夸大自己的经验、能力。 你需要接受他人实际而有价值的协助，才能更好的提高能力并获得成功。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《谁是谷歌想要的人才？》]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/20/are-you-smart-enough-to-work-at-google/"/>
    <updated>2013-04-20T00:47:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/20/are-you-smart-enough-to-work-at-google</id>
    <content type="html"><![CDATA[<p><em>道理都明白，还得靠自己</em></p>

<h3>关于本书</h3>

<p>藉由大多数程序员天然的对google怀有的朝圣般的向往和喜爱，开始看<a href="http://book.douban.com/subject/21329264/">这本书</a>。</p>

<p><img class="left" src="http://img.cnbeta.com/upimg/121231/raymon725_1451506190985.jpg" width="250" height="400" title="Place Kitten #2" ></p>

<p>书中的中文版序的标题就是“跳出框框来思考”，这种观点倒不是第一次见到了，甚至可以说，这些观点充斥于互联网上的各种流传、经验贴中。但这并不意味着我们不需要再花时间在这种书上。道理都懂，就是做不好已经成为这个信息通畅的时代的特征之一。正所谓“纸上得来终觉浅，绝知此事要躬行”。</p>

<!--more-->


<p>而如果有一个“躬行”过的人再将他的感受娓娓道来，辅以自己的用心体会，或许会事半功倍呢。这就是我想通过这本书得到的。如下几点，让这个想法成为可能：</p>

<ul>
<li>1.这本书并不单单是一个题集，大约有一般的篇目是在讲述题记，另外一半的篇目，则是代入感颇强的为什么要这么思考的叙述。后者看似无关功利，但却可以给人足够的心理暗示和支撑，以提升良好思考习惯在内心的重要性。</li>
<li>2.作者庞德斯通写过不少充满思维的力量书。</li>
</ul>


<p>认同归认同，关键的还是自己的所得。下面是我的一些思考。</p>

<h3>我的思考</h3>

<ul>
<li>1.解决问题的思路：问题域 --> 结果</li>
<li><ul>
<li>问题域：需要慎重思考，充分利用资源，限定问题域的边界。往往很多题目是在没有弄清楚题意的情况下开始解答而得不到好的答案。</li>
</ul>
</li>
<li><ul>
<li>问题域向结果推演：首先是发散式的头脑风暴（发现尽可能多的维度的才想），然后再依次的理性分析，找本质规律，内在联系，向结果靠拢。</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>2.分析过程中，有些需要注意的点：</li>
<li><ul>
<li>用尽可能的条件。</li>
</ul>
</li>
<li><ul>
<li>图形化思维（可能人体对这种视觉层次的抽象更敏锐），</li>
</ul>
</li>
<li><ul>
<li>第一个想出来的一般都不够优美。但是或许可以从中吸取观点，不断提炼优化，得到更好的答案。这是一个过程。</li>
</ul>
</li>
<li><ul>
<li>切记“瞎猜”数据，注意发散思维和逻辑思维之间的界定。（费米问题）</li>
</ul>
</li>
<li><ul>
<li>极限思想是发散思维中容易套用的方式。往往可以将它作为启发的源泉，再深入挖掘。</li>
</ul>
</li>
<li><ul>
<li>多跟面试官交流，脑子有时候会跟着嘴巴走。别说的太绝对，显示自己的反思。（不单就面试而言，包括一些场合的交流讨论）</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>3.知识性的东西：</li>
<li><ul>
<li>算法：最近看算法跟最早算法课上的感觉，完全不一样。随着对计算机技术整体的把握越来越细，对算法的理解也变得更深刻了。</li>
</ul>
</li>
<li><ul>
<li>概率论:很多情况下，我们会根据经验来算概率，而不依从概率模型、概率论的理论体系，但人的感性认知是有局限性的。理论体系能支撑更多复杂的情况的分析。</li>
</ul>
</li>
<li><ul>
<li>常识:或许在面对费米问题等时，掌握一些尝试，更有利。</li>
</ul>
</li>
</ul>


<hr />

<p>PS：书中有几个小错误，比如.P208 4题的答案的笔误，以及P210 第5题解题思路中的纰漏。不过，无伤大雅，译者翻译的已经很是舒畅了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于软件工程的一些看法]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/18/some-opinions-about-software-engineering/"/>
    <updated>2013-04-18T18:03:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/18/some-opinions-about-software-engineering</id>
    <content type="html"><![CDATA[<p>标题党了，其实实际的内容是[自己的项目经验总结和反思]。</p>

<p>今天在高级软件工程课上，做了一次关于项目经验的展示。展示的主题围绕自己参与的移动互联网团队开发经验展开。借此机会，我整理了一下思路，于是有了以下的slides。没时间码字，就先把slides直接贴上来啦:)</p>

<!--more-->


<h3>提纲如下：</h3>

<ul>
<li>背景：对传统软件工程方法和移动互联网项目开发的对比</li>
<li>项目总结体会：</li>
<li><ul>
<li>协同目标</li>
</ul>
</li>
<li><ul>
<li>需求的确定</li>
</ul>
</li>
<li><ul>
<li>里程碑</li>
</ul>
</li>
<li><ul>
<li>编码实现</li>
</ul>
</li>
<li><ul>
<li>发布</li>
</ul>
</li>
<li>ReCERD成长模型</li>
<li>推荐书目</li>
</ul>


<p>值得指出的是，所谓的ReCERD小团队项目能力成长模型其实是我根据自身经历所总结的一套方法模型;)， slides中有详细介绍，见笑了，欢迎拍砖。</p>

<p>刚发现speakerdeck是个很好的slides分享平台，试着用一下：</p>

<script async class="speakerdeck-embed" data-slide="1" data-id="a4e4c53097650130957c1e87fe6147c9" data-ratio="1.2994923857868" src="http://biaobiaoqi.github.com//speakerdeck.com/assets/embed.js"></script>


<p>slides下载：</p>

<ul>
<li><p>dropbox 下载地址：<a href="https://www.dropbox.com/s/0b084ccqao8igq8/course-slides.pdf">点击下载</a></p></li>
<li><p>speackerdeck下载地址：<a href="https://speakerdeck.com/biaobiaoqi/thinking-in-software-engineering?slide=1">点击下载</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分治、时间空间的权衡:最大合的连续字串问题 (PAT 1007)]]></title>
    <link href="http://biaobiaoqi.github.com/blog/2013/04/05/maximum-subsequence-sum/"/>
    <updated>2013-04-05T20:16:00+08:00</updated>
    <id>http://biaobiaoqi.github.com/blog/2013/04/05/maximum-subsequence-sum</id>
    <content type="html"><![CDATA[<p><a href="http://pat.zju.edu.cn/contests/pat-a-practise/1007">PAT1007</a>：给定一个整数串，找出连续子串中合最大的子串。</p>

<p>《编程珠玑》中用专门的一章对这个问题进行了讲解。（《编程珠玑（第2版）》P73 第8章 算法设计技术）</p>

<p>第一次在PAT上遇到这个题目时，我的思路如下：</p>

<p><del>最简单的淡然是一个三层循环咯，O(n3)，肯定会超时。节省时间的话，用动态规划吧。但简单的动态规划，显然是会超出内存限制的。有没有更巧妙的子问题划分方法呢？</del>先找到子问题：因为要求的串必须连续，分治的时候需要考虑如何延续这个连续性，那么每个子问题中就得考虑找出三个串：1.即左端连续的最大串，2.右端连续的最大串，3.整个串中的最大串.<del>由于每个问题都有三个量要维护，难道我得造出三个表来？卡主:(</del></p>

<!--more-->


<p>《编程珠玑》列出了性能上依次递进的四个算法。这里我结合个人理解和感悟做一些阐释。</p>

<ul>
<li>1.粗暴的brute forse。三层循环嵌套，据说当n 为100000的时候，就需要运行15天时间=.=</li>
</ul>


<p>```
maxsofar = 0
for i = 0 [0, n)</p>

<pre><code>for j = [i, n)
    sum = 0;
    for k = [i, j]
     sum += x[k]
     /*sum is sum of x[i..j]*/
     maxsofar = max(maxsofar, sum)
</code></pre>

<p>```</p>

<ul>
<li>2.针对第一个算法做出了优化。利用零时变量保存状态，避免了过多的重复操作，即所谓的<strong>memoization思想</strong>。时间复杂度下降到O(n*logn)。不过这份代码在PAT的OJ上仍然会超时。</li>
</ul>


<p>```
maxsofar = 0;
for i = [0, n)</p>

<pre><code>sum = 0;
for j = [i, n)
    sum += x[j]
    /* sum is sum of x[i..j]*/
    max sofar = max(maxsofar, sum)
</code></pre>

<p>```</p>

<p>相比之下，动态规划的策略也是有memoization的思想在的，不过，在这里用DP将会创建一张很大的表。。。超出内存限定。</p>

<ul>
<li><p>3.分治算法</p>

<p>  其实之前我自己在思考DP更好的子问题划分时，已经考虑到了这种分治策略。但它的实现，<strong>并非需要DP支持</strong>。</p>

<p>  divide：将串平均分为两段，如下代码第6行。分别处理两个子串，并拼接计算。</p>

<p>  conquer： 计算1.自身包含左端的最大子串；2.包含右端的最大子串；（这两个子串用于与其他子串拼接）；3.自身的最大子串。</p></li>
</ul>


<p>```
float maxsum3(l, u)</p>

<pre><code>if (l &gt; u) /* zero elements*/
    return 0
if (l == u) /* one element*/
    return max (0, x[l]);
m = (1 + u) / 2

/* find max crossing to left */
lmax = sum = 0
for (i = m; i &gt;= 1; i--)
    sum += x[i]
lmax = max(lmax, sum)

/* find max croosing to right */
rmax = sum = 0;
for i = (m, u]
    sum += x[i]
rmax = max(rmax, sum)

return max(lmax+rmax, maxsum3(l, m), maxsum3(m+1, u))   
</code></pre>

<p>```</p>

<ul>
<li><p>4.扫描算法</p>

<p>  类似于<strong>数学归纳法</strong>的思想。从串的最左端开始扫描。对于子串[0, k],其最大子串要么存在于[0, k-1]中而不包含[k]，称其为maxsofar，要么包含[k]，称其maxendingright。</p>

<p>  maxsofar和maxendingright是可能重合的。maxendingright的作用在于对[0,k+1]的子串而言，新的元素[k+1]可以与之结合，从而产生可能的新的子串。</p>

<p>  如果[k+1]本身就是负数呢？不要紧，将[k+1]加入到maxendingright的过程本身就是试错以产生可能的过程。当maxendingright降到0以下时，放弃掉这一子串就好了，因为无论如何扩张，它都是会拖后退的。别忘了，我们还维护着maxsofar，它记录最大的子串。有点绕，但是可以严格的证明算法的正确性。</p>

<p>  伪代码如下：</p></li>
</ul>


<p>```
maxsofa = 0
maxendingright = 0
for i = [0, n)</p>

<pre><code>/* invariant: maxendingright and maxsofar are accurate for x[0..i-1]*/
maxendingright = max(maxendingright + x[i], 0)
maxsofar = max(maxsofar, maxendingright)
</code></pre>

<p>```</p>

<p>根据这个思路，写出<a href="https://github.com/biaobiaoqi/biaobiaoqiCode/blob/master/src/biaobiaoqi/pat/advancedlevel/APAT1007.java">代码</a>，一遍AC:)</p>

<h2>总结：</h2>

<ul>
<li>保存状态，避免重复计算：在算法整体框架没有大的优化的情况下，时间和空间的trade-off或许会有奇效。memoization本身就是一种用空间换时间的思想，而DP中用一种方式实现了这种思想。不过不要被DP算法所禁锢。因为，这个trade-off的实现是很多变的，就像这题的第2种算法。</li>
<li>分治：它的重要性不必多说了。同样的，DP中有分治的思想，但分治本身也是非常灵活的。</li>
<li>数学归纳证明，对算法的设计和正确性佐证很有帮助。话说它也类似于分治的思想呢。</li>
</ul>

]]></content>
  </entry>
  
</feed>
